# Gamma-Poisson model
## General Principles
To model the relationship between a count outcome variable and one or more independent variables with [<span style="color:#0D6EFD">overdispersion ðŸ›ˆ</span>]{#overdispersion}, we can use the _Negative Binomial model_. 

## Considerations
::: callout-caution 
- We have the same considerations as for the [Poisson model](7.&#32;Poisson&#32;model.qmd).
  
- Overdispersion is handled because the Negative Binomial model assumes that each Poisson count observation has its own rate. This is an additional parameter specified in the model (in the code, it is `log_days`).
:::

## Example
Below is an example code snippet demonstrating Bayesian Gamma-Poisson model using the Bayesian Inference (BI) package:

::: {.panel-tabset group="language"}
### Python
```python
# Simulate data -------------------------------------------------------------
import tensorflow_probability.substrates.jax.distributions as tfd
init_key, sample_key = random.split(random.PRNGKey(int(r.randint(0, 10000000))))
init_key = jnp.array(init_key)
num_days = 30
y = tfd.Poisson(rate=1.5).sample(seed=init_key, sample_shape=(num_days,))
num_weeks = 4
y_new = tfd.Poisson(rate=0.5 * 7).sample(seed=init_key, sample_shape=(num_weeks,))
y_all = np.concatenate([y, y_new])
exposure = np.concatenate([np.repeat(1, 30), np.repeat(7, 4)])
monastery = np.concatenate([np.repeat(0, 30), np.repeat(1, 4)])
d = pd.DataFrame.from_dict(dict(y=y_all, days=exposure, monastery=monastery))
d["log_days"] = d.days.pipe(np.log)
d.to_csv('Sim dat Gamma poisson.csv', index=False)

from main import *
# Setup device ------------------------------------------------
m = bi()

# Import data ------------------------------------------------
m.data_on_model = dict(
    log_days=jnp.array(d.log_days.values),  # rate of each count data
    monastery=jnp.array(d.monastery.values),
    output=jnp.array(d.y.values)
)

# Define model ------------------------------------------------
def model(log_days, monastery, output):
    a = dist.normal(0, 1, shape=[1], name='a')
    b = dist.normal(0, 1, shape=[1], name='b')
    l = log_days + a + b * monastery
    lk("y", Poisson(rate=l), obs=output)

# Run MCMC ------------------------------------------------
m.run(model) 

# Summary ------------------------------------------------
m.sampler.print_summary(0.89)
```

### R
```R
library(reticulate)
bi <- import("main")

# Setup device ------------------------------------------------
m = bi$bi(platform='cpu')

# Import data ------------------------------------------------
m$data('Sim dat Gamma poisson.csv', sep=',') 
m$data_to_model(list('log_days', 'monastery', 'y' ))

# Define model ------------------------------------------------
model <- function(log_days, monastery, y){
  alpha = bi$dist$normal(0, 1, name='alpha')
  beta = bi$dist$normal(0, 0.2, name='beta')
  l = log_days + alpha + beta * monastery
  bi$lk("y", bi$Poisson(rate=l), obs=y)
}

# Run MCMC ------------------------------------------------
m$run(model) 
# Summary ------------------------------------------------
m$sampler$print_summary(0.89)
```
:::

## Mathematical Details
### *Formula*
We model the relationship between the independent variable $X$ and the count outcome variable $Y$ using the following equation:

$$
\log(\lambda_i) = \exp(\text{rates}_i + \alpha + \beta X_i)
$$

Where:

- $\lambda_i$ is the mean rate parameter of the negative binomial distribution (expected count) for observation *i*.
  
- $\log(\lambda_i)$ is the log of the mean rate parameter, ensuring it is positive for observation *i*.
  
- $\alpha$ is the intercept term.
  
- $\beta$ is the regression coefficients.
  
- $X_i$ is the value of the predictor variable  for observation *i*.

### *Bayesian model*
In the Bayesian formulation, we define each parameter with [<span style="color:#0D6EFD">priors ðŸ›ˆ</span>]{#prior}. We can express the Bayesian regression model accounting for prior distribution as follows:

$$
Y_i \sim \text{Poisson}(\lambda)
$$

$$
\log(\lambda_i) \sim \text{rates}_i + \alpha + \beta X_i
$$

$$
\alpha \sim \text{Normal}(0,1)
$$

$$
\beta \sim \text{Normal}(0,1)
$$

Where:

- $Y_i$  is dependent variable for observation *i*. 
  
- $\lambda_i$ is the mean rate parameter of the Poisson distribution for observation *i*, assuming that each Poisson count observation has its own $rate_i$.
  
- $\log(\lambda_i)$ is the log of the mean rate parameterfor observation *i*, ensuring it is positive.
  
- $\alpha$ is the intercept term.
  
- $\beta$ is the regression coefficients.
  
- $X_i$ is the value of the predictor variable  for observation *i*.


## Notes

::: callout-note 
- We can apply multiple variables similarly as in [chapter 2](2.&#32;Multiple&#32;Regression&#32;for&#32;Continuous&#32;Variables.qmd).

- We can apply interaction terms similarly as in [chapter 3](3.&#32;Interaction&#32;between&#32;Continuous&#32;Variables.qmd).

- We can apply categorical variables similarly as in [chapter 4](4.&#32;Categorical&#32;variable.md).
:::

## Reference(s)
@mcelreath2018statistical
