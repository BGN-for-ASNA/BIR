# Modeling Network

A network represents the relationships (links) between entities (nodes). These links can be weighted (weighted network) or unweighted (binary network), directed (directed network) or undirected (undirected network). Regardless of their type, networks generate links shared by nodes, leading to data dependency when modeling the network. One proposed solution is to model network links with random [intercepts](12.%20Varying%20intercepts.qmd) and [effects](13.%20Varying%20slopes.qmd). By adding such parameters to the model, we can account for the correlations between node link relationships.

## Considerations
::: callout-caution
-   The particularity here is that varying intercepts and slopes are generated for both [<span style="color:#0D6EFD">nodal effects ðŸ›ˆ</span>]{#NodeF} and [<span style="color:#0D6EFD">dyadic effects ðŸ›ˆ</span>]{#DyadicF}. Those the varying intercepts and slopes are identical to those described in previous chapters and will therefore not be detailed further and only the random centered version of the varying slopes will be described here.
:::

## Example
Below is an example code snippet demonstrating Bayesian network model with send-receiver effect:

``` python
# Building model and sampling it ------------------
ids = jnp.arange(0,data['N_id'][0])
idx = bi.net.vec_node_to_edgle(jnp.stack([ids, ids], axis = -1))

@jit
def logit(x):
    return jnp.log(x / (1 - x))

def model2(idx, result_outcomes, dyad_effects, focal_individual_predictors, target_individual_predictors):
    N_id = ids.shape[0]

    # Sender Receiver effect (SR) its shape is equal to N_id ---------------------------------------
    ## Varying intercept and slope for SR
    sr_rf, sr_raw, sr_sigma, sr_L = bi.net.nodes_random_effects(N_id, cholesky_density = 2) 
    sender_receiver = sr_rf

    # Dyadic effect (D) its shape is equal to n dyads -----------------------------------------
    ## Varying intercept and slope for D
    rf, dr_raw, dr_sigma, dr_L = bi.net.dyadic_random_effects(sender_receiver.shape[0], cholesky_density = 2)
    dr =  rf

    lk('Y', Poisson(jnp.exp( sender_receiver + dr )), obs=result_outcomes)

m.data_on_model = dict(
    idx = idx,
    result_outcomes = bi.net.mat_to_edgl(data['outcomes']), 
    dyad_effects = bi.net.prepare_dyadic_effect(kinship), # Can be a jax array of multiple dimensions
    focal_individual_predictors = data['individual_predictors'],
    target_individual_predictors = data['individual_predictors']
)

m.run(model2) 
summary = m.summary()
summary
```

## Mathematical Details

### *Main Formula*

The simple model that can be built to model link weights between nodes *i* and *j* can be defined using a poisson distribution:

$$
G_{ij} \sim Poisson(Y_{ij})
$$ 

$$
log(Y_{ij}) =  \lambda_i + \pi_j + \delta_{ij}
$$

where:

-   $Y\_{ij}$ is the weight of links between *i* and *j*.
  
-   $\lambda_i$ is the [<span style="color:#0D6EFD">sender effect ðŸ›ˆ</span>]{#senderF}.
  
-   $\pi_j$ is the [<span style="color:#0D6EFD">receiver effect ðŸ›ˆ</span>]{#receiverF}.
  
-   $\delta_{ij}$ is the  [<span style="color:#0D6EFD">dyadic effect ðŸ›ˆ</span>]{#DyadicF2}.
- 
### *Defining formula sub-equations and prior distributions*

$\lambda_i$ and $\pi_j$ are varying [intercepts](12.%20Varying%20intercepts.qmd) and [slopes](13.%20Varying%20slopes.qmd) identical to those described in previous chapters and are define through the following equations:

$$
\left(\begin{array}{cc} 
\lambda_i \\
\pi_j 
\end{array}\right) 
\sim 
MultivariateNormal\left(\begin{array}{cc} 
\left(\begin{array}{cc} 
\sigma_\lambda \\
\sigma_\pi
\end{array}\right) \circ 
\left(\begin{array}{cc} 
L *
\left(\begin{array}{cc} 
\hat{\lambda}_i \\ \hat{\pi}_i
\end{array}\right)
\end{array}\right)
\end{array}\right)
$$

$$
\sigma_\lambda \sim Exponential(1)
$$

$$
\sigma_\pi \sim Exponential(1)
$$

$$
L \sim LKJ(2)
$$

Similarly, for each dyads we can define varying intercepts and slopes to account for correlation between the propensity to emit and receive links of a dyad :

$$
\left(\begin{array}{cc} 
\delta_{ij} \\
\delta_{ji}
\end{array}\right) 
\sim 
MultivariateNormal\left(\begin{array}{cc} 
\left(\begin{array}{cc} 
\sigma_\delta \\
\sigma_\delta
\end{array}\right) \circ 
\left(\begin{array}{cc} 
L_\delta *
\left(\begin{array}{cc} 
\hat{\delta}_{ij} \\ \hat{\delta}_{ji}
\end{array}\right)
\end{array}\right)
\end{array}\right)
$$

$$
\sigma_\delta \sim Exponential(1)
$$

$$
\sigma_\delta \sim Exponential(1)
$$

$$
L \sim LKJ(2)
$$

## Note(s)
::: callout-note
-  Note that any additional covariates can be summed with a regression coefficient to $\lambda_i$, $\pi_j$ and $\delta_{ij}$. Of course for $\lambda_i$, $\pi_j$ as they represent nodal effects those covariates need to be nodal characteristics (e.g., sex, age) whereas for $\\delta_{ij}$ as it represents dyadic effects those covariates need to be dyadic characteristics (e.g., genetic distances). Concidering previous example given a vector of nodal characteristics *individual_predictors* and a a matrix of dyadic characteristics *kinship* we can incorporate those covariates in the sender-receiver effect and dyadic effect respectivelly as fellow:

``` python
def model2(idx, result_outcomes, dyad_effects, focal_individual_predictors, target_individual_predictors):
    N_id = ids.shape[0]

    # Sender Receiver effect (SR) its shape is equal to N_id ---------------------------------------
    ## Covariates for SR
    sr_terms, focal_effects, target_effects = bi.net.nodes_terms(focal_individual_predictors, target_individual_predictors) 

    ## Varying intercept and slope for SR
    sr_rf, sr_raw, sr_sigma, sr_L = bi.net.nodes_random_effects(N_id, cholesky_density = 2) 

    sender_receiver = sr_terms + sr_rf

    # Dyadic effect (D) its shape is equal to n dyads -----------------------------------------
    ## Covariates for D
    dr_terms, dyad_effects = bi.net.dyadic_terms(dyad_effects)

    ## Varying intercept and slope for D
    rf, dr_raw, dr_sigma, dr_L = bi.net.dyadic_random_effects(sender_receiver.shape[0], cholesky_density = 2)
    dr = dr_terms + rf

    lk('Y', Poisson(jnp.exp( sender_receiver + dr ), is_sparse = False), obs=result_outcomes) # is_sparse = True, if matrix have a lot of zeros, it can help to speed up computation.

m.data_on_model = dict(
    idx = idx,
    result_outcomes = bi.net.mat_to_edgl(data['outcomes']), 
    dyad_effects = bi.net.prepare_dyadic_effect(kinship), # Can be a jax array of multiple dimensions
    focal_individual_predictors = data['individual_predictors'],
    target_individual_predictors = data['individual_predictors']
)

m.run(model2) 
summary = m.summary()
summary.loc[['focal_effects[0]', 'target_effects[0]', 'dyad_effects[0]']]
```
-   We can apply multiple variables similarly as [chapter 2: Multiple continuous Variables](2.%20Multiple%20continuous%20Variables.qmd).

-   We can apply interaction terms similarly as [chapter 3: Interaction between continuous variables](3.%20Interaction%20between%20continuous%20variables.qmd).


-   Network links can be modeled using Bernoulli, Binomial, Poisson, or zero-inflated Poisson distributions. So, by replacing the Poisson distribution with a binomial distribution, we can model the existence or absence of link â€” i.e., model binary networks.

-   If the network is undirected, then accounting for correlation between propensity to emit and receive links is not necessary, and the terms $\lambda_i$, $\pi_j$ , and $\delta_{ij}$ are no longer required. (Is it correct?)

-   In the following chapters, we will see how to incorporate additional network effects into the model to account for network structural properties (e.g., clusters, assortativity, triadic closure, etc.).
:::

