# Principal Component Analysis (PCA)

## General Principles

**Principal Component Analysis (PCA)** is a technique used to reduce the dimensionality of a dataset by transforming it into a new coordinate system where the greatest variance by any projection of the data comes to lie on the first coordinates (called principal components). This method helps capture the underlying structure of high-dimensional data by identifying patterns based on variance.

In **Bayesian PCA**, uncertainty in the model parameters is explicitly taken into account by using a probabilistic framework. This allows us to not only estimate the principal components but also quantify the uncertainty around them, as well as avoid overfitting by incorporating prior knowledge.

### Goal:
- **Reduce dimensionality** while retaining as much variance as possible.
- **Infer posterior distributions** over the principal components, instead of point estimates, by incorporating prior distributions over the parameters.

### Bayesian PCA Model:
Given an observed data matrix \( X \in \mathbb{R}^{N \times D} \) (where _N_ is the number of samples and _D_ is the number of dimensions), we assume the data is generated by a lower-dimensional latent variable model:

$$
X = ZW^T + \epsilon
$$

Where:
- \( X \) is the observed data matrix.
- \( Z \in \mathbb{R}^{N \times K} \) is the latent variable matrix (latent features with \( K \ll D \)).
- \( W \in \mathbb{R}^{D \times K} \) is the matrix of principal components (projection matrix).
- \( \epsilon \) is Gaussian noise, assumed to be normally distributed: \( \epsilon \sim \mathcal{N}(0, \sigma^2 I) \).

## Considerations

In **Bayesian PCA**, we assume prior distributions for the latent variables _Z_ and the principal component loadings _W_. We place Gaussian priors on both _Z_ and _W_, and learn their posterior distributions using the observed data _X_.

This approach differs from traditional PCA by allowing the posterior distributions to reflect uncertainty in the model parameters.

## Example

Here is an example code snippet demonstrating Bayesian PCA using TensorFlow Probability:

```python
import tensorflow as tf
import tensorflow_probability as tfp

tfd = tfp.distributions

# Generate synthetic data
num_samples = 100
num_features = 5
true_latent_dim = 2

# Simulate low-dimensional latent variables
z = tf.random.normal(shape=(num_samples, true_latent_dim))

# Generate a weight matrix for the principal components
w = tf.random.normal(shape=(num_features, true_latent_dim))

# Generate observed data with noise
x = tf.matmul(z, w, transpose_b=True) + tf.random.normal(shape=(num_samples, num_features))

# Define the Bayesian PCA model
def model_fn():
    z = yield tfd.Normal(loc=0., scale=1., sample_shape=(num_samples, true_latent_dim), name="z")
    w = yield tfd.Normal(loc=0., scale=1., sample_shape=(num_features, true_latent_dim), name="w")
    x_obs = yield tfd.Normal(loc=tf.matmul(z, w, transpose_b=True), scale=1., name="x_obs")

# Specify the model and inference
model = tfd.JointDistributionCoroutineAutoBatched(model_fn)
surrogate_posterior = tfp.experimental.vi.build_factored_surrogate_posterior(model)

# Fit the model
losses = tfp.vi.fit_surrogate_posterior(
    target_log_prob_fn=model.log_prob,
    surrogate_posterior=surrogate_posterior,
    optimizer=tf.optimizers.Adam(learning_rate=0.1),
    num_steps=200
)
```

## Mathematical Details

Bayesian PCA is formulated as a latent variable model, with the following probabilistic assumptions:

### Likelihood
$$
p(X | Z, W, \sigma^2) = \prod_{i=1}^N \mathcal{N}(X_i | Z_i W^T, \sigma^2 I)
$$

Where:
- \( X \) is the observed data.
- \( Z \) is the latent variable matrix, which explains the structure of the data in a lower-dimensional space.
- \( W \) is the matrix of principal components (the projection matrix).
- \( \sigma^2 \) is the noise variance, which represents the variability in the data not explained by the principal components.

### Priors
We place Gaussian priors on both the latent variables _Z_ and the principal components _W_:

$$
p(Z) = \prod_{i=1}^N \mathcal{N}(Z_i | 0, I)
$$

$$
p(W) = \prod_{j=1}^D \mathcal{N}(W_j | 0, \alpha^2 I)
$$

Where _Î±_ is a hyperparameter controlling the variance of the prior over _W_.

### Posterior Inference
We compute the posterior distribution over the latent variables and the principal components:

$$
p(Z, W | X) \propto p(X | Z, W) p(Z) p(W)
$$

Inference in Bayesian PCA involves approximating this posterior distribution using techniques like Variational Inference or Markov Chain Monte Carlo (MCMC).

## Use Cases

- **Dimensionality Reduction**: Bayesian PCA is commonly used to reduce the dimensionality of high-dimensional datasets while incorporating uncertainty about the latent structure.
  
- **Data Visualization**: By projecting data into a lower-dimensional space, PCA helps in visualizing high-dimensional datasets in 2D or 3D plots.

- **Noise Modeling**: Bayesian PCA provides an advantage over classical PCA by explicitly modeling noise and accounting for uncertainty in the data.

- **Feature Extraction**: The latent variables learned by Bayesian PCA can serve as new features for downstream tasks, such as classification or clustering.
