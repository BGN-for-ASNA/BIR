{"asymmetric_laplace": "```r\n#' Samples from an Asymmetric Laplace distribution.\n#'\n#' The Asymmetric Laplace distribution is a generalization of the Laplace distribution,\n#' where the two sides of the distribution are scaled differently. It is defined by\n#' a location parameter (`loc`), a scale parameter (`scale`), and an asymmetry parameter (`asymmetry`).\n#'\n#' \\deqn{f(x) = \\frac{1}{2 \\text{scale}} \\left( \\frac{1}{\\text{scale}} \\exp\\left(-\\frac{|x - \\text{loc}|}{\\text{scale} \\cdot \\text{asymmetry}}}\\right) \\text{ if } x < \\text{loc} + \\text{scale} \\cdot \\text{asymmetry}\n+ \\frac{1}{\\text{scale}} \\exp\\left(-\\frac{|x - \\text{loc}|}{\\text{scale} / \\text{asymmetry}}\\right) \\text{ if } x > \\text{loc} - \\text{scale} / \\text{asymmetry}}\n#'\n#' @export\n#' @importFrom reticulate py_none tuple\n#' @param loc A numeric vector or single numeric value representing the location parameter of the distribution.\n#' @param scale A numeric vector or single numeric value representing the scale parameter of the distribution.\n#' @param asymmetry A numeric vector or single numeric value representing the asymmetry parameter of the distribution.\n#' @param shape A numeric vector specifying the shape of the output.  This is used to set the batch shape when `sample=FALSE` (model building) or as `sample_shape` to draw a raw JAX array when `sample=TRUE` (direct sampling).\n#' @param event Integer specifying the number of batch dimensions to reinterpret as event dimensions (used in model building).\n#' @param mask A logical vector indicating which observations to mask.\n#' @param create_obj Logical; If `TRUE`, returns the raw NumPyro distribution object instead of creating a sample site.\n#'\n#' @return When `sample=FALSE`: A NumPyro AsymmetricLaplace distribution object (for model building).\n#'         When `sample=TRUE`: A JAX array of samples drawn from the AsymmetricLaplace distribution (for direct sampling).\n#'         When `create_obj=TRUE`: The raw NumPyro distribution object (for advanced use cases).\n#'\n#' @examples\n#' library(BI)\n#' m = importBI('cpu')\n#' bi.dist.asymmetric_laplace(loc=0.0, scale=1.0, asymmetry=1.0, sample=TRUE)\n#'\n#' @seealso \\url{https://num.pyro.ai/en/stable/distributions.html#asymmetriclaplace}\n```", "asymmetric_laplace_quantile": "```r\n#' Asymmetric Laplace Quantile Distribution\n#'\n#' Samples from an AsymmetricLaplaceQuantile distribution.\n#'\n#' This distribution is an alternative parameterization of the AsymmetricLaplace\n#' distribution, commonly used in Bayesian quantile regression. It utilizes a\n#' `quantile` parameter to define the balance between the left- and right-hand\n#' sides of the distribution, representing the proportion of probability density\n#' that falls to the left-hand side.\n#'\n#' \\deqn{f(x) = \\frac{1}{2 \\sigma} \\exp\\left(-\\frac{|x - \\mu|}{\\sigma} \\frac{1}{q-1}\\right) \\left(1 - \\frac{1}{2q}\\right)}\n#'\n#' @param loc The location parameter of the distribution.\n#' @param scale The scale parameter of the distribution.\n#' @param quantile The quantile parameter, representing the proportion of\n#'   probability density to the left of the median. Must be between 0 and 1.\n#' @param shape A numeric vector. When `sample=False` (model building), this is\n#'   used with `.expand(shape)` to set the distribution's batch shape. When\n#'   `sample=True` (direct sampling), this is used as `sample_shape` to draw a\n#'   raw JAX array of the given shape.\n#' @param event The number of batch dimensions to reinterpret as event\n#'   dimensions (used in model building).\n#' @param mask An optional boolean array to mask observations.\n#' @param create_obj If `TRUE`, returns the raw NumPyro distribution object\n#'   instead of creating a sample site. This is essential for building complex\n#'   distributions like `MixtureSameFamily`.\n#'\n#' @return When `sample=FALSE`: A NumPyro AsymmetricLaplaceQuantile distribution\n#'   object (for model building).\n#'\n#'   When `sample=TRUE`: A JAX array of samples drawn from the\n#'   AsymmetricLaplaceQuantile distribution (for direct sampling).\n#'\n#'   When `create_obj=TRUE`: The raw NumPyro distribution object (for advanced\n#'   use cases).\n#'\n#' @examples\n#' library(BI)\n#' m = importBI('cpu')\n#' bi.dist.asymmetric_laplace_quantile(loc=0.0, scale=1.0, quantile=0.5, sample=TRUE)\n#'\n#' @seealso \\url{https://num.pyro.ai/en/stable/distributions.html#asymmetriclaplacequantile}\n#' @export\n#' @importFrom reticulate py_none tuple\n```", "bernoulli": "```r\n#' Sample from a Bernoulli distribution.\n#'\n#' The Bernoulli distribution models a single trial with two possible outcomes: success or failure.\n#' It is parameterized by the probability of success, often denoted as 'p'.\n#'\n#' \\deqn{P(X=1) = p \\\\ P(X=0) = 1 - p}\n#'\n#' @export\n#' @importFrom reticulate py_none tuple\n#'\n#' @param probs A numeric vector, matrix, or array representing the probability of success for each Bernoulli trial. Must be between 0 and 1.\n#' @param logits A numeric vector, matrix, or array representing the log-odds of success for each Bernoulli trial. `probs = sigmoid(logits)`.\n#' @param shape A numeric vector specifying the shape of the output.  Used with `.expand(shape)` when `sample=False` (model building) to set the distribution's batch shape. When `sample=True` (direct sampling), this is used as `sample_shape` to draw a raw JAX array of the given shape.\n#' @param event An integer indicating the number of batch dimensions to reinterpret as event dimensions (used in model building).\n#' @param mask A logical vector, matrix, or array (optional) to mask observations.\n#' @param create_obj A logical value (optional). If `TRUE`, returns the raw NumPyro distribution object instead of creating a sample site.\n#'\n#' @return A NumPyro Bernoulli distribution object (for model building) when `sample=FALSE`.\n#' A JAX array of samples drawn from the Bernoulli distribution (for direct sampling) when `sample=TRUE`.\n#' The raw NumPyro distribution object (for advanced use cases) when `create_obj=TRUE`.\n#'\n#' @examples\n#' library(BI)\n#' m = importBI('cpu')\n#' bi.dist.bernoulli(probs=0.7, sample=TRUE)\n#' @seealso \\url{https://num.pyro.ai/en/stable/distributions.html#bernoulli}\n```", "bernoulli_logits": "```r\n#' Samples from a Bernoulli distribution parameterized by logits.\n#'\n#' The Bernoulli distribution models a single binary event (success or failure),\n#' parameterized by the log-odds ratio of success.  The probability of success\n#' is given by the sigmoid function applied to the logit.\n#'\n#' @title BernoulliLogits\n#'\n#' @param logits A numeric vector or array containing the log-odds ratio of success. Must be real-valued.\n#' @param shape A numeric vector specifying the shape of the output.  When `sample=False` (model building),\n#'   this is used with `.expand(shape)` to set the distribution's batch shape.\n#'   When `sample=True` (direct sampling), this is used as `sample_shape` to draw a raw JAX array of the given shape.\n#' @param event An integer specifying the number of batch dimensions to reinterpret as event dimensions (used in model building). Defaults to 0.\n#' @param mask A logical vector or array to mask observations.  Defaults to `reticulate::py_none()`.\n#' @param create_obj A logical value. If `TRUE`, returns the raw NumPyro distribution object instead of creating a sample site. Defaults to `FALSE`.\n#'\n#' @return When `sample=FALSE`: A NumPyro BernoulliLogits distribution object (for model building).\n#'         When `sample=TRUE`: A JAX array of samples drawn from the BernoulliLogits distribution (for direct sampling).\n#'         When `create_obj=TRUE`: The raw NumPyro distribution object (for advanced use cases).\n#'\n#' @examples\n#' library(BI)\n#' m = importBI('cpu')\n#' bi.dist.bernoulli_logits(logits=jnp.array(c(0.2, 1, 2)), sample=TRUE)\n#'\n#' @seealso \\url{https://num.pyro.ai/en/stable/distributions.html#bernoulli-logits}\n#' @export\n#' @importFrom reticulate py_none tuple\n```", "bernoulli_probs": "```r\n#' Samples from a Bernoulli distribution parameterized by probabilities.\n#'\n#' The Bernoulli distribution models the probability of success in a single trial,\n#' where the outcome is binary (success or failure). It is characterized by a single\n#' parameter, `probs`, representing the probability of success.\n#'\n#' @title BernoulliProbs\n#'\n#' @param probs A numeric vector representing the probability of success for each Bernoulli trial.\n#'   Must be between 0 and 1.\n#' @param shape A numeric vector used for shaping. When `sample=False` (model building),\n#'   this is used with `.expand(shape)` to set the distribution's batch shape. When\n#'   `sample=True` (direct sampling), this is used as `sample_shape` to draw a raw JAX array\n#'   of the given shape.\n#' @param event An integer representing the number of batch dimensions to reinterpret as event\n#'   dimensions (used in model building).\n#' @param mask A logical vector to mask observations.\n#' @param create_obj A logical value. If `TRUE`, returns the raw NumPyro distribution object\n#'   instead of creating a sample site. This is essential for building complex distributions\n#'   like `MixtureSameFamily`.\n#'\n#' @return A NumPyro BernoulliProbs distribution object (for model building).\n#'\n#' @examples\n#' library(BI)\n#' m = importBI('cpu')\n#' bi.dist.bernoulli_probs(probs=array(c(0.2, 0.7, 0.5)), sample=TRUE)\n#'\n#' @export\n#' @importFrom reticulate py_none tuple\n#' @seealso \\url{https://num.pyro.ai/en/stable/distributions.html#bernoulliprobs}\n```", "beta": "```r\n#' Samples from a Beta distribution, defined on the interval [0, 1].\n#' The Beta distribution is a versatile distribution often used to model\n#' probabilities or proportions. It is parameterized by two positive shape\n#' parameters, often referred to as concentration parameters in the NumPyro\n#' context.\n#'\n#' @title Beta Distribution\n#'\n#' @param concentration1 A numeric vector or array representing the first concentration parameter (shape parameter). Must be positive.\n#' @param concentration0 A numeric vector or array representing the second concentration parameter (shape parameter). Must be positive.\n#' @param shape A numeric vector.  When `sample=False` (model building),\n#'   this is used with `.expand(shape)` to set the distribution's batch shape.\n#'   When `sample=True` (direct sampling), this is used as `sample_shape` to draw a raw\n#'   JAX array of the given shape.\n#' @param event An integer representing the number of batch dimensions to reinterpret as event dimensions (used in model building).\n#' @param mask A logical vector or array. Optional boolean array to mask observations.\n#' @param create_obj A logical value. If `TRUE`, returns the raw NumPyro distribution object instead of creating a sample\n#'   site. This is essential for building complex distributions like `MixtureSameFamily`.\n#'\n#' @return A NumPyro Beta distribution object (for model building).\n#'   A JAX array of samples drawn from the Beta distribution (for direct sampling).\n#'   The raw NumPyro distribution object (for advanced use cases).\n#'\n#' @examples\n#' library(BI)\n#' m = importBI('cpu')\n#' bi.dist.beta(concentration1 = 1.0, concentration0 = 1.0, sample = TRUE)\n#'\n#' @seealso \\url{https://num.pyro.ai/en/stable/distributions.html#beta}\n#' @export\n#' @importFrom reticulate py_none tuple\nbi.dist.beta <- function(concentration1, concentration0, shape = NULL, event = NULL, mask = NULL, create_obj = FALSE) {\n  # Placeholder for actual implementation.  Replace with the real code.\n  NULL\n}\n```", "beta_binomial": "```r\n#' BetaBinomial Distribution\n#'\n#' Samples from a BetaBinomial distribution, a compound distribution where the probability of success in a binomial\n#' experiment is drawn from a Beta distribution. This models situations where the underlying probability of success\n#' is not fixed but varies according to a prior belief represented by the Beta distribution.\n#'\n#' @title BetaBinomial\n#' @description Samples from a BetaBinomial distribution.\n#' @param concentration1 A numeric vector, matrix, or array representing the first concentration parameter (alpha) of the Beta distribution.\n#' @param concentration0 A numeric vector, matrix, or array representing the second concentration parameter (beta) of the Beta distribution.\n#' @param total_count A numeric vector, matrix, or array representing the number of Bernoulli trials in the Binomial part of the distribution.\n#' @param shape A numeric vector.  When `sample=False` (model building), this is used with `.expand(shape)` to set the distribution's batch shape. When `sample=True` (direct sampling), this is used as `sample_shape` to draw a raw JAX array of the given shape.\n#' @param event An integer representing the number of batch dimensions to reinterpret as event dimensions (used in model building).\n#' @param mask A logical vector. Optional boolean array to mask observations.\n#' @param create_obj A logical value. If `TRUE`, returns the raw NumPyro distribution object instead of creating a sample site.\n#' @return When `sample=FALSE`: A NumPyro BetaBinomial distribution object (for model building).\n#'         When `sample=TRUE`: A JAX array of samples drawn from the BetaBinomial distribution (for direct sampling).\n#'         When `create_obj=TRUE`: The raw NumPyro distribution object (for advanced use cases).\n#' @examples\n#' library(BI)\n#' m = importBI('cpu')\n#' bi.dist.beta_binomial(concentration1 = 1.0, concentration0 = 1.0, total_count = 10, sample = TRUE)\n#' @seealso \\url{https://num.pyro.ai/en/stable/distributions.html#betabinomial}\n#' @importFrom reticulate py_none tuple\n#' @export\n```", "beta_proportion": "```r\n#' Samples from a BetaProportion distribution.\n#'\n#' The BetaProportion distribution is a reparameterization of the conventional\n#' Beta distribution in terms of a the variate mean and a\n#' precision parameter. It\u2019s useful for modeling rates and proportions.\n#'\n#' \\deqn{f(x) = \\frac{x^{\\alpha - 1} (1 - x)^{\\beta - 1}}{B(\\alpha, \\beta)}}\n#'\n#' @param mean A numeric vector, matrix, or array representing the mean of the BetaProportion distribution,\n#'   must be between 0 and 1.\n#' @param concentration A numeric vector, matrix, or array representing the concentration parameter of the BetaProportion distribution.\n#' @param shape A numeric vector. When `sample=False` (model building), this is used with `.expand(shape)` to set the\n#'   distribution's batch shape. When `sample=True` (direct sampling),\n#'   this is used as `sample_shape` to draw a raw JAX array of the\n#'   given shape.\n#' @param event An integer representing the number of batch dimensions to reinterpret as event\n#'   dimensions (used in model building).\n#' @param mask An optional boolean vector to mask observations.\n#' @param create_obj A logical value. If `TRUE`, returns the raw NumPyro distribution\n#'   object instead of creating a sample site. This is essential for\n#'   building complex distributions like `MixtureSameFamily`.\n#'\n#' @return A NumPyro BetaProportion distribution object (for model building).\n#'   A JAX array of samples drawn from the BetaProportion distribution\n#'   (for direct sampling).\n#'   The raw NumPyro distribution object (for advanced use cases).\n#'\n#' @examples\n#' library(BI)\n#' m = importBI('cpu')\n#' bi.dist.beta_proportion(mean=0.5, concentration=2.0, sample=TRUE, shape=c(1000))\n#'\n#' @export\n#' @importFrom reticulate py_none tuple\n```", "binomial": "```r\n#' Samples from a Binomial distribution.\n#'\n#' The Binomial distribution models the number of successes in a sequence of independent Bernoulli trials.\n#' It represents the probability of obtaining exactly *k* successes in *n* trials, where each trial has a probability *p* of success.\n#'\n#' \\deqn{P(X = k) = \\binom{n}{k} p^k (1-p)^{n-k}}\n#'\n#' @param total_count (int): The number of trials *n*.\n#' @param probs (numeric vector, optional): The probability of success *p* for each trial. Must be between 0 and 1.\n#' @param logits (numeric vector, optional): The log-odds of success for each trial. `probs = jax.nn.sigmoid(logits)`.\n#' @param shape (numeric vector): A multi-purpose argument for shaping. When `sample=False` (model building), this is used with `.expand(shape)` to set the distribution's batch shape. When `sample=True` (direct sampling), this is used as `sample_shape` to draw a raw JAX array of the given shape.\n#' @param event (int): The number of batch dimensions to reinterpret as event dimensions (used in model building).\n#' @param mask (numeric vector of booleans, optional): Optional boolean array to mask observations.\n#' @param create_obj (logical, optional): If `TRUE`, returns the raw NumPyro distribution object instead of creating a sample site. This is essential for building complex distributions like `MixtureSameFamily`.\n#' @return Binomial distribution object (for model building) when `sample=FALSE`.\n#' JAX array of samples drawn from the Binomial distribution (for direct sampling) when `sample=TRUE`.\n#' The raw NumPyro distribution object (for advanced use cases) when `create_obj=TRUE`.\n#' @examples\n#' library(BI)\n#' m = importBI('cpu')\n#' bi.dist.binomial(total_count = 10, probs = 0.5, sample = TRUE)\n#' @export\n#' @importFrom reticulate py_none tuple\n```", "binomial_logits": "```r\n#' BinomialLogits Distribution\n#'\n#' The BinomialLogits distribution represents a binomial distribution parameterized by logits.\n#' It is useful when the probability of success is not directly known but is instead\n#' expressed as logits, which are the natural logarithm of the odds ratio.\n#'\n#' \\deqn{P(X=k) = \\binom{n}{k} \\frac{e^{logits_k}}{1 + e^{logits_k}}}\n#'\n#' @export\n#' @importFrom reticulate py_none tuple\n#'\n#' @param logits A numeric vector or array representing the log-odds of each success.\n#' @param total_count An integer representing the number of trials.\n#' @param shape A numeric vector specifying the shape of the distribution.  This is used to set the\n#'   distribution's batch shape when `sample=FALSE` (model building) or as `sample_shape`\n#'   to draw a raw JAX array of the given shape when `sample=TRUE` (direct sampling).\n#' @param event An integer representing the number of batch dimensions to reinterpret as event\n#'   dimensions (used in model building).\n#' @param mask An optional boolean vector or array to mask observations.\n#' @param create_obj A logical value. If `TRUE`, returns the raw NumPyro distribution object\n#'   instead of creating a sample site.\n#'\n#' @return When `sample=FALSE`: A NumPyro BinomialLogits distribution object (for model building).\n#'   When `sample=TRUE`: A JAX array of samples drawn from the BinomialLogits distribution (for direct sampling).\n#'   When `create_obj=TRUE`: The raw NumPyro distribution object (for advanced use cases).\n#'\n#' @examples\n#' library(BI)\n#' m = importBI('cpu')\n#' bi.dist.binomial_logits(logits=jnp.zeros(10), total_count=5, sample=TRUE)\n#'\n#' @seealso \\url{https://num.pyro.ai/en/stable/distributions.html#binomialllogits}\n```", "binomial_probs": "```r\n#' Samples from a Binomial distribution with specified probabilities for each trial.\n#'\n#' The Binomial distribution models the number of successes in a sequence of independent Bernoulli trials, where each trial has the same probability of success.\n#'\n#' \\deqn{P(k) = \\binom{n}{k} p^k (1-p)^{n-k}}\n#'\n#' @export\n#' @importFrom reticulate py_none tuple\n#'\n#' @param probs A numeric vector representing the probability of success for each trial. Must be between 0 and 1.\n#' @param total_count The number of trials in each sequence.\n#' @param shape A numeric vector used for shaping. When `sample=False` (model building), this is used with `.expand(shape)` to set the distribution's batch shape. When `sample=True` (direct sampling), this is used as `sample_shape` to draw a raw JAX array of the given shape.\n#' @param event The number of batch dimensions to reinterpret as event dimensions (used in model building).\n#' @param mask An optional boolean vector to mask observations.\n#' @param create_obj Logical; If `TRUE`, returns the raw NumPyro distribution object instead of creating a sample site. This is essential for building complex distributions like `MixtureSameFamily`.\n#'\n#' @return A NumPyro BinomialProbs distribution object (for model building), a JAX array of samples drawn from the BinomialProbs distribution (for direct sampling), or the raw NumPyro distribution object (for advanced use cases).\n#'\n#' @examples\n#' library(BI)\n#' m = importBI('cpu')\n#' bi.dist.binomial_probs(probs=0.5, total_count=10, sample=TRUE)\n#' @seealso \\url{https://num.pyro.ai/en/stable/distributions.html#binomialprobs}\n```", "car": "```r\n#' Conditional Autoregressive (CAR) Distribution\n#'\n#' The CAR distribution models a vector of variables where each variable is a linear\n#' combination of its neighbors in a graph.\n#'\n#' \\deqn{p(x) = \\prod_{i=1}^{K} \\mathcal{N}(x_i | \\mu_i, \\Sigma_i)}\n#'\n#' where :math:`\\mu_i` is a function of the values of the neighbors of site :math:`i`\n#' and :math:`\\Sigma_i` is the variance of site :math:`i`.\n#'\n#' \\note{The CAR distribution is a special case of the multivariate normal distribution.\n#' It is used to model spatial data, such as temperature or precipitation.}\n#'\n#' @export\n#' @importFrom reticulate py_none tuple\n#'\n#' @param loc Numeric vector, matrix, or array representing the mean of the distribution.\n#' @param correlation Numeric vector, matrix, or array representing the correlation between variables.\n#' @param conditional_precision Numeric vector, matrix, or array representing the precision of the distribution.\n#' @param adj_matrix Numeric vector, matrix, or array representing the adjacency matrix defining the graph.\n#' @param is_sparse Logical indicating whether the adjacency matrix is sparse. Defaults to `FALSE`.\n#' @param validate_args Logical indicating whether to validate arguments. Defaults to `reticulate::py_none()`.\n#'\n#' @return A CAR distribution object.\n#'\n#' @examples\n#' library(BI)\n#' m = importBI('cpu')\n#' bi.dist.car(loc=c(0,0), correlation=c(0.5,0.5), conditional_precision=c(1,1), adj_matrix=matrix(c(0,1,1,0), nrow=2), is_sparse=FALSE, validate_args=TRUE)\n```", "categorical": "```r\n#' Sample from a Categorical distribution.\n#'\n#' The Categorical distribution, also known as the multinomial distribution,\n#' describes the probability of different outcomes from a finite set of possibilities.\n#' It is commonly used to model discrete choices or classifications.\n#'\n#' \\deqn{P(k) = \\frac{e^{\\log(p_k)}}{\\sum_{j=1}^{K} e^{\\log(p_j)}}}\n#'\n#' where :math:`p_k` is the probability of outcome :math:`k`, and the sum is over all possible outcomes.\n#'\n#' @param probs A numeric vector of probabilities for each category. Must sum to 1.\n#' @param shape A numeric vector specifying the shape. When `sample=FALSE` (model building),\n#'   this is used with `.expand(shape)` to set the distribution's batch shape.\n#'   When `sample=TRUE` (direct sampling), this is used as `sample_shape` to draw a raw JAX array\n#'   of the given shape.\n#' @param event The number of batch dimensions to reinterpret as event dimensions (used in model building).\n#' @param mask An optional boolean vector to mask observations.\n#' @param create_obj Logical; If `TRUE`, returns the raw NumPyro distribution object instead of creating a sample site.\n#' @return When `sample=FALSE`: A NumPyro Categorical distribution object (for model building).\n#'   When `sample=TRUE`: A JAX array of samples drawn from the Categorical distribution (for direct sampling).\n#'   When `create_obj=TRUE`: The raw NumPyro distribution object (for advanced use cases).\n#' @examples\n#' library(BI)\n#' m = importBI('cpu')\n#' bi.dist.categorical(probs = jnp.array(c(0.2, 0.3, 0.5)), sample = TRUE)\n#' @export\n#' @importFrom reticulate py_none tuple\n```", "categorical_logits": "```r\n#' Samples from a Categorical distribution with logits.\n#'\n#' This distribution represents a discrete probability distribution over a finite set of outcomes,\n#' where the probabilities are determined by the logits. The probability of each outcome is given\n#' by the softmax function applied to the logits.\n#'\n#' @title CategoricalLogits\n#'\n#' @description\n#' Samples from a Categorical distribution with logits.\n#'\n#' @param logits A numeric vector representing the log-odds of each category.\n#' @param shape A numeric vector specifying the shape. When `sample=FALSE` (model building), this is used with `.expand(shape)` to set the distribution's batch shape. When `sample=TRUE` (direct sampling), this is used as `sample_shape` to draw a raw JAX array of the given shape.\n#' @param event An integer representing the number of batch dimensions to reinterpret as event dimensions (used in model building).\n#' @param mask A boolean vector, optional, to mask observations.\n#' @param create_obj A logical value. If `TRUE`, returns the raw NumPyro distribution object instead of creating a sample site.\n#'\n#' @return A NumPyro CategoricalLogits distribution object (for model building) when `sample=FALSE`.\n#' A JAX array of samples drawn from the CategoricalLogits distribution (for direct sampling) when `sample=TRUE`.\n#' The raw NumPyro distribution object (for advanced use cases) when `create_obj=TRUE`.\n#'\n#' @examples\n#' library(BI)\n#' m = importBI('cpu')\n#' bi.dist.categorical_logits(logits=jnp.zeros(5), sample=TRUE)\n#'\n#' @export\n#' @importFrom reticulate py_none tuple\n#' @seealso \\url{https://num.pyro.ai/en/stable/distributions.html#categoricallogits}\n```", "categorical_probs": "```r\n#' Samples from a Categorical distribution.\n#'\n#' The Categorical distribution is a discrete probability distribution that\n#' represents the probability of each outcome from a finite set of possibilities.\n#' It is often used to model the outcome of a random process with a fixed number\n#' of possible outcomes, such as the roll of a die or the selection of an item\n#' from a list.\n#'\n#' @title CategoricalProbs\n#' @description Samples from a Categorical distribution.\n#' @param probs A numeric vector representing the probabilities for each category. Must sum to 1.\n#' @param shape A numeric vector used for shaping. When `sample=False` (model building), this is used with `.expand(shape)` to set the\n#'   distribution's batch shape. When `sample=True` (direct sampling), this\n#'   is used as `sample_shape` to draw a raw JAX array of the given shape.\n#' @param event Integer representing the number of batch dimensions to reinterpret as event dimensions\n#'   (used in model building).\n#' @param mask A logical vector to mask observations.\n#' @param create_obj Logical; If TRUE, returns the raw NumPyro distribution object\n#'   instead of creating a sample site. This is essential for building\n#'   complex distributions like `MixtureSameFamily`.\n#' @return A NumPyro CategoricalProbs distribution object (for model building).\n#'   A JAX array of samples drawn from the CategoricalProbs distribution (for\n#'   direct sampling).\n#'   The raw NumPyro distribution object (for advanced use cases).\n#' @seealso \\url{https://num.pyro.ai/en/stable/distributions.html#categoricalprobs}\n#' @importFrom reticulate py_none tuple\n#' @export\nbi.dist.categorical_probs <- function(probs, shape, event, mask = NULL, create_obj = FALSE) {\n  # Placeholder for the actual implementation.  Replace with the real code.\n  # This is just to satisfy the roxygen2 documentation.\n  if (is.null(mask)) {\n    mask = reticulate::py_none()\n  }\n  \n  # Example Usage:\n  # library(BI)\n  # m = importBI('cpu')\n  # bi.dist.categorical_probs(probs=jnp.array([0.2, 0.3, 0.5]), sample=True)\n}\n```", "cauchy": "```r\n#' Cauchy Distribution\n#'\n#' Samples from a Cauchy distribution.\n#'\n#' The Cauchy distribution, also known as the Lorentz distribution, is a continuous probability distribution\n#' that arises frequently in various fields, including physics and statistics. It is characterized by its\n#' heavy tails, which extend indefinitely.\n#'\n#' \\deqn{f(x) = \\frac{1}{\\pi \\gamma} \\left[ \\frac{\\gamma^2}{(x - \\mu)^2 + \\gamma^2} \\right]}\n#'\n#' @param loc A numeric vector or scalar representing the location parameter. Defaults to 0.0.\n#' @param scale A numeric vector or scalar representing the scale parameter. Must be positive. Defaults to 1.0.\n#' @param shape A numeric vector specifying the shape of the distribution.  When `sample=False` (model building), this is used\n#'   with `.expand(shape)` to set the distribution's batch shape. When `sample=True` (direct sampling), this is\n#'   used as `sample_shape` to draw a raw JAX array of the given shape.\n#' @param event An integer representing the number of batch dimensions to reinterpret as event dimensions (used in model building).\n#'   Defaults to `reticulate::py_none()`.\n#' @param mask A logical vector, optional, to mask observations. Defaults to `reticulate::py_none()`.\n#' @param create_obj A logical value. If `TRUE`, returns the raw NumPyro distribution object instead of creating a sample\n#'   site. Defaults to `FALSE`.\n#'\n#' @return When `sample=FALSE`: A NumPyro Cauchy distribution object (for model building).\n#'   When `sample=TRUE`: A JAX array of samples drawn from the Cauchy distribution (for direct sampling).\n#'   When `create_obj=TRUE`: The raw NumPyro distribution object (for advanced use cases).\n#'\n#' @examples\n#' library(BI)\n#' m = importBI('cpu')\n#' bi.dist.cauchy(loc=0.0, scale=1.0, sample=TRUE)\n#'\n#' @export\n#' @importFrom reticulate py_none tuple\n#' @seealso \\url{https://num.pyro.ai/en/stable/distributions.html#cauchy}\n```", "chi2": "```r\n#' Samples from a Chi-squared distribution.\n#'\n#' The Chi-squared distribution is a continuous probability distribution that arises\n#' frequently in hypothesis testing, particularly in ANOVA and chi-squared tests.\n#' It is defined by a single positive parameter, degrees of freedom (df), which\n#' determines the shape of the distribution.\n#'\n#' \\deqn{p(x; df) = \\frac{1}{2^{df/2} \\Gamma(df/2)} x^{df/2 - 1} e^{-x/2}}\n#'\n#' @export\n#' @importFrom reticulate py_none tuple\n#'\n#' @param df A numeric vector representing the degrees of freedom. Must be positive.\n#' @param shape A numeric vector used for shaping. When `sample=FALSE` (model building),\n#'   this is used with `.expand(shape)` to set the distribution's batch shape.\n#'   When `sample=TRUE` (direct sampling), this is used as `sample_shape` to draw a raw JAX array\n#'   of the given shape.\n#' @param event An integer representing the number of batch dimensions to reinterpret as event\n#'   dimensions (used in model building).\n#' @param mask A logical vector, matrix, or array to mask observations.\n#' @param create_obj A logical value. If `TRUE`, returns the raw NumPyro distribution object\n#'   instead of creating a sample site. This is essential for building complex distributions\n#'   like `MixtureSameFamily`.\n#'\n#' @return A NumPyro Chi2 distribution object (when `sample=FALSE`).\n#'   A numeric vector, matrix, or array of samples drawn from the Chi2 distribution (when `sample=TRUE`).\n#'   The raw NumPyro distribution object (when `create_obj=TRUE`).\n#'\n#' @examples\n#' library(BI)\n#' m = importBI('cpu')\n#' bi.dist.chi2(df = 3.0, sample = TRUE)\n#'\n#' @seealso \\url{https://num.pyro.ai/en/stable/distributions.html#chi2}\n```", "circulant_normal": "```r\n#' Multivariate Normal Distribution with Circulant Covariance\n#'\n#' Multivariate normal distribution with covariance matrix :math:`\\mathbf{C}` that is\n#' positive-definite and circulant [1], i.e., has periodic boundary conditions. The\n#' density of a sample :math:`\\mathbf{x}\\in\\mathbb{R}^n` is the standard multivariate\n#' normal density\n#'\n#' .. math::\n#'\n#'     p\\left(\\mathbf{x}\\mid\\boldsymbol{\\mu},\\mathbf{C}\\right) =\n#'     \\frac{\\left(\\mathrm{det}\\,\\mathbf{C}\\right)^{-1/2}}{\\left(2\\pi\\right)^{n / 2}}\n#'     \\exp\\left(-\\frac{1}{2}\\left(\\mathbf{x}-\\boldsymbol{\\mu}\\right)^\\intercal\n#'     \\mathbf{C}^{-1}\\left(\\mathbf{x}-\\boldsymbol{\\mu}\\right)\\right),\n#'\n#' where :math:`\\mathrm{det}` denotes the determinant and :math:`^\\intercal` the\n#' transpose. Circulant matrices can be diagnolized efficiently using the discrete\n#' Fourier transform [1], allowing the log likelihood to be evaluated in\n#' :math:`n \\log n` time for :math:`n` observations [2].\n#'\n#' @param loc A numeric vector representing the mean :math:`\\boldsymbol{\\mu}` of the distribution.\n#' @param covariance_row A numeric vector representing the first row of the circulant covariance matrix :math:`\\mathbf{C}`.\n#' @param covariance_rfft A numeric vector representing the real part of the real fast Fourier transform of :code:`covariance_row`.\n#' @return An object representing the multivariate normal distribution with circulant covariance.\n#' @examples\n#' library(BI)\n#' m = importBI('cpu')\n#' bi.dist.multivariate_normal_circulant(required_args_with_defaults, sample=TRUE)\n#' @seealso \\url{https://num.pyro.ai/en/stable/distributions.html#normal}\n#' @importFrom reticulate py_none tuple\n#' @export\nbi.dist.multivariate_normal_circulant <- function(loc, covariance_row = reticulate::py_none(), covariance_rfft = reticulate::py_none()) {\n  # Implementation details would go here, calling the Python function\n  # and handling any necessary conversions.\n}\n```", "delta": "```r\n#' The Delta distribution.\n#'\n#' The Delta distribution, also known as a point mass distribution, assigns probability 1 to a single point and 0 elsewhere. It's useful for representing deterministic variables or as a building block for more complex distributions.\n#'\n#' .. math::\n#'    P(x = v) = 1\n#'\n#' @export\n#' @importFrom reticulate py_none tuple\n#' @param v A numeric vector representing the location of the point mass.\n#' @param shape A numeric vector used for shaping. When `sample=FALSE` (model building), this is used with `.expand(shape)` to set the distribution's batch shape. When `sample=TRUE` (direct sampling), this is used as `sample_shape` to draw a raw JAX array of the given shape.\n#' @param event The number of batch dimensions to reinterpret as event dimensions (used in model building).\n#' @param mask A boolean vector to mask observations.\n#' @param create_obj A logical value. If `TRUE`, returns the raw NumPyro distribution object instead of creating a sample site.\n#' @return A NumPyro Delta distribution object (for model building) when `sample=FALSE`. A JAX array of samples drawn from the Delta distribution (for direct sampling) when `sample=TRUE`. The raw NumPyro distribution object (for advanced use cases) when `create_obj=TRUE`.\n#' @examples\n#' library(BI)\n#' m = importBI('cpu')\n#' bi.dist.delta(v=0.0, sample=TRUE)\n#' @seealso \\url{https://num.pyro.ai/en/stable/distributions.html#delta}\n```", "dirichlet": "```r\n#' Samples from a Dirichlet distribution.\n#'\n#' The Dirichlet distribution is a multivariate generalization of the Beta distribution.\n#' It is a probability distribution over a simplex, which is a set of vectors where each element is non-negative and sums to one.\n#' It is often used as a prior distribution for categorical distributions.\n#'\n#' \\deqn{P(x_1, ..., x_K) = \\frac{\\Gamma(\\sum_{i=1}^K \\alpha_i)}{\\prod_{i=1}^K \\Gamma(\\alpha_i)} \\prod_{i=1}^K x_i^{\\alpha_i - 1}}\n#'\n#' @export\n#' @importFrom reticulate py_none tuple\n#'\n#' @param concentration A numeric vector or array representing the concentration parameter(s) of the Dirichlet distribution. Must be positive.\n#' @param shape A numeric vector specifying the shape of the distribution.\n#' @param event Integer representing the number of batch dimensions to reinterpret as event dimensions (used in model building).\n#' @param mask A logical vector or array to mask observations.\n#' @param create_obj Logical; If TRUE, returns the raw NumPyro distribution object instead of creating a sample site.\n#'\n#' @return A NumPyro Dirichlet distribution object (for model building) when `sample=FALSE`.\n#' A JAX array of samples drawn from the Dirichlet distribution (for direct sampling) when `sample=TRUE`.\n#' The raw NumPyro distribution object (for advanced use cases) when `create_obj=TRUE`.\n#'\n#' @examples\n#' library(BI)\n#' m = importBI('cpu')\n#' bi.dist.dirichlet(concentration=jnp.array(c(1.0, 1.0, 1.0)), sample=TRUE)\n#' @seealso \\url{https://num.pyro.ai/en/stable/distributions.html#dirichlet}\n```", "dirichlet_multinomial": "```r\n#' Samples from a DirichletMultinomial distribution.\n#'\n#' This distribution combines a Dirichlet distribution (for the probabilities of categories)\n#' and a Multinomial distribution (for the counts within each category).  The Dirichlet\n#' distribution acts as a prior on the probabilities, allowing for a flexible and\n#' informative model.\n#'\n#' @title DirichletMultinomial\n#' @description Samples from a DirichletMultinomial distribution.\n#' @param concentration A numeric vector or array representing the concentration parameter (alpha) for the Dirichlet distribution.\n#' @param shape A numeric vector specifying the shape of the distribution. When `sample=False` (model building),\n#'   this is used with `.expand(shape)` to set the distribution's batch shape. When\n#'   `sample=True` (direct sampling), this is used as `sample_shape` to draw a raw JAX\n#'   array of the given shape.\n#' @param event The number of batch dimensions to reinterpret as event dimensions (used in model building).\n#' @param mask A logical vector or array to mask observations.\n#' @param create_obj A logical value. If `TRUE`, returns the raw NumPyro distribution object instead of creating a sample site.\n#' @return When `sample=FALSE`: A NumPyro DirichletMultinomial distribution object (for model building).\n#'   When `sample=TRUE`: A JAX array of samples drawn from the DirichletMultinomial distribution (for direct sampling).\n#'   When `create_obj=TRUE`: The raw NumPyro distribution object (for advanced use cases).\n#' @examples\n#' library(BI)\n#' m = importBI('cpu')\n#' bi.dist.dirichlet_multinomial(concentration=jnp.array(c(1.0, 1.0, 1.0)), total_count=10, sample=TRUE)\n#' @importFrom reticulate py_none tuple\n#' @export\n```", "discrete_uniform": "```r\n#' Samples from a Discrete Uniform distribution.\n#'\n#' The Discrete Uniform distribution defines a uniform distribution over a range of integers.\n#' It is characterized by a lower bound (`low`) and an upper bound (`high`), inclusive.\n#'\n#' \\deqn{P(X = k) = \\frac{1}{high - low + 1}, \\quad k \\in \\{low, low+1, ..., high\\}}\n#'\n#' @title DiscreteUniform\n#' @description Samples from a Discrete Uniform distribution.\n#' @param low A numeric vector representing the lower bound of the uniform range, inclusive.\n#' @param high A numeric vector representing the upper bound of the uniform range, inclusive.\n#' @param shape A numeric vector.  When `sample=FALSE` (model building), this is used with `.expand(shape)` to set the distribution's batch shape. When `sample=TRUE` (direct sampling), this is used as `sample_shape` to draw a raw JAX array of the given shape.\n#' @param event Integer representing the number of batch dimensions to reinterpret as event dimensions (used in model building).\n#' @param mask A logical vector. Optional boolean array to mask observations.\n#' @param create_obj Logical. If TRUE, returns the raw NumPyro distribution object instead of creating a sample site. This is essential for building complex distributions like `MixtureSameFamily`.\n#' @return When `sample=FALSE`: A NumPyro DiscreteUniform distribution object (for model building).\n#'         When `sample=TRUE`: A JAX array of samples drawn from the Discrete Uniform distribution (for direct sampling).\n#'         When `create_obj=TRUE`: The raw NumPyro distribution object (for advanced use cases).\n#' @examples\n#' library(BI)\n#' m = importBI('cpu')\n#' bi.dist.discrete_uniform(low=0, high=5, sample=TRUE)\n#' @export\n#' @importFrom reticulate py_none tuple\n```", "doubly_truncated_power_law": "```r\n#' Doubly Truncated Power Law distribution.\n#'\n#' This distribution represents a continuous power law with a finite support bounded\n#' between `low` and `high`, and with an exponent `alpha`. It is normalized over the\n#' interval `[low, high]` to ensure the area under the density function is 1.\n#'\n#' The probability density function (PDF) is defined as:\n#'\n#' \\eqn{f(x; \\alpha, a, b) = \\frac{x^{\\alpha}}{Z(\\alpha, a, b)}}\n#'\n#' where the normalization constant \\eqn{Z(\\alpha, a, b)} is given by:\n#'\n#' \\eqn{Z(\\alpha, a, b) = \\begin{cases}\n#' \\log(b) - \\log(a) & \\text{if } \\alpha = -1, \\\\\n#' \\frac{b^{1 + \\alpha} - a^{1 + \\alpha}}{1 + \\alpha} & \\text{otherwise}.\n#' \\end{cases}}\n#'\n#' This distribution is useful for modeling data that follows a power-law behavior\n#' but is naturally bounded due to measurement or theoretical constraints (e.g.,\n#' finite-size systems).\n#'\n#' @export\n#' @importFrom reticulate py_none tuple\n#'\n#' @param alpha Numeric or vector. Power-law exponent.\n#' @param low Numeric or vector. Lower bound of the distribution (must be \u2265 0).\n#' @param high Numeric or vector. Upper bound of the distribution (must be > 0).\n#' @param shape Numeric vector. The shape of the output tensor.  Defaults to None.\n#' @param sample_shape Numeric vector, optional. The shape of the samples to draw. Defaults to None.\n#' @param validate_args Logical. Whether to validate the arguments. Defaults to TRUE.\n#'\n#' @return A doubly truncated power law distribution object.\n#'\n#' @examples\n#' library(BI)\n#' m = importBI('cpu')\n#' bi.dist.doubly_truncated_power_law(low=0.1, high=10.0, alpha=2.0, sample=TRUE)\n```", "euler_maruyama": "```r\n#' Euler\u2013Maruyama method\n#'\n#' Euler\u2013Maruyama method is a method for the approximate numerical solution\n#' of a stochastic differential equation (SDE). It simulates the solution\n#' to an SDE by iteratively applying the Euler method to each time step,\n#' incorporating a random perturbation to account for the diffusion term.\n#'\n#' .. math::\n#'     dX_t = f(X_t, t) dt + g(X_t, t) dW_t\n#'\n#' where:\n#' - :math:`X_t` is the state of the system at time :math:`t`.\n#' - :math:`f(X_t, t)` is the drift coefficient.\n#' - :math:`g(X_t, t)` is the diffusion coefficient.\n#' - :math:`dW_t` is a Wiener process (Brownian motion).\n#'\n#' @param t A numeric vector representing the discretized time steps.\n#' @param sde_fn A function that takes the current state and time as input and returns the drift and diffusion coefficients.\n#' @param init_dist The initial distribution of the system.\n#' @param shape A numeric vector specifying the shape of the output tensor.  Defaults to `NULL`.\n#' @param sample_shape A numeric vector specifying the shape of the samples to draw. Defaults to `NULL`.\n#' @param validate_args A logical value indicating whether to validate the arguments. Defaults to `TRUE`.\n#' @return A numeric vector representing samples drawn from the Euler\u2013Maruyama distribution.\n#' @importFrom reticulate py_none tuple\n#' @export\n#' @examples\n#' library(BI)\n#' m = importBI('cpu')\n#' bi.dist.euler_maruyama(t=jnp.array(c(0.0, 0.1, 0.2)), sde_fn=function(x, t) {c(x, 1.0)}, init_dist=m.dist.normal(0.0, 1.0, create_obj=TRUE), sample = TRUE)\n```", "exponential": "```r\n#' Samples from an Exponential distribution.\n#'\n#' The Exponential distribution is a continuous probability distribution that models the time until an event occurs in a Poisson process, where events occur continuously and independently at a constant average rate. It is often used to model the duration of events, such as the time until a machine fails or the length of a phone call.\n#'\n#' \\deqn{f(x) = \\lambda e^{-\\lambda x} \\text{ for } x \\geq 0}\n#'\n#' @export\n#' @importFrom reticulate py_none tuple\n#'\n#' @param rate A numeric vector, matrix, or array representing the rate parameter, :math:`\\lambda`. Must be positive.\n#' @param shape A numeric vector used to shape the distribution. When `sample=False` (model building), this is used with `.expand(shape)` to set the distribution's batch shape. When `sample=True` (direct sampling), this is used as `sample_shape` to draw a raw JAX array of the given shape.\n#' @param event An integer representing the number of batch dimensions to reinterpret as event dimensions (used in model building).\n#' @param mask An optional boolean vector to mask observations.\n#' @param create_obj A logical value. If `TRUE`, returns the raw NumPyro distribution object instead of creating a sample site. This is essential for building complex distributions like `MixtureSameFamily`.\n#'\n#' @return When `sample=FALSE`: A NumPyro Exponential distribution object (for model building).\n#'         When `sample=TRUE`: A JAX array of samples drawn from the Exponential distribution (for direct sampling).\n#'         When `create_obj=TRUE`: The raw NumPyro distribution object (for advanced use cases).\n#'\n#' @examples\n#' library(BI)\n#' m = importBI('cpu')\n#' bi.dist.exponential(rate=1.0, sample=TRUE)\n#'\n#' @seealso \\url{https://num.pyro.ai/en/stable/distributions.html#exponential}\n```", "folded_distribution": "```r\n#' Samples from a Folded distribution, which is the absolute value of a base univariate distribution.\n#' This distribution reflects the base distribution across the origin, effectively taking the absolute value of each sample.\n#'\n#' @title FoldedDistribution\n#' @description Samples from a Folded distribution, which is the absolute value of a base univariate distribution.\n#'\n#' @param loc A numeric value representing the location parameter of the base distribution. Defaults to 0.0.\n#' @param scale A numeric value representing the scale parameter of the base distribution. Defaults to 1.0.\n#' @param shape A numeric vector specifying the shape of the distribution.  Use a vector (e.g., `c(10)`) to define the shape.\n#' @param event An integer representing the number of batch dimensions to reinterpret as event dimensions (used in model building).\n#' @param mask A logical vector, matrix, or array used to mask observations.\n#' @param create_obj A logical value. If `TRUE`, returns the raw NumPyro distribution object instead of creating a sample site.\n#'\n#' @return A NumPyro FoldedDistribution distribution object (for model building) when `sample=FALSE`.\n#' A JAX array of samples drawn from the FoldedDistribution distribution (for direct sampling) when `sample=TRUE`.\n#' The raw NumPyro distribution object (for advanced use cases) when `create_obj=TRUE`.\n#'\n#' @examples\n#' library(BI)\n#' m = importBI('cpu')\n#' bi.dist.folded_distribution(m.dist.normal(loc=0.0, scale=1.0, create_obj = TRUE), sample=TRUE)\n#'\n#' @export\n#' @importFrom reticulate py_none tuple\n```", "gamma": "```r\n#' Samples from a Gamma distribution.\n#'\n#' The Gamma distribution is a continuous probability distribution that arises frequently in Bayesian statistics,\n#' particularly in prior distributions for variance parameters. It is defined by two positive shape parameters,\n#' concentration (k) and rate (theta).\n#'\n#' @title Gamma Distribution\n#'\n#' @param concentration A numeric vector representing the shape parameter of the Gamma distribution (k > 0).\n#' @param rate A numeric vector representing the rate parameter of the Gamma distribution (theta > 0).\n#' @param shape A numeric vector. When `sample=False` (model building), this is used with `.expand(shape)` to set the distribution's batch shape. When `sample=True` (direct sampling), this is used as `sample_shape` to draw a raw JAX array of the given shape.\n#' @param event An integer representing the number of batch dimensions to reinterpret as event dimensions (used in model building).\n#' @param mask A logical vector. Optional boolean array to mask observations.\n#' @param create_obj A logical value. If `TRUE`, returns the raw NumPyro distribution object instead of creating a sample site. This is essential for building complex distributions like `MixtureSameFamily`.\n#' @return A NumPyro Gamma distribution object (for model building), a JAX array of samples drawn from the Gamma distribution (for direct sampling), or the raw NumPyro distribution object (for advanced use cases).\n#' @examples\n#' library(BI)\n#' m = importBI('cpu')\n#' bi.dist.gamma(concentration = 2.0, rate = 0.5, sample = TRUE)\n#' @export\n#' @importFrom reticulate py_none tuple\n```", "gamma_poisson": "```r\n#' GammaPoisson Distribution\n#'\n#' A compound distribution comprising of a gamma-poisson pair, also referred to as\n#' a gamma-poisson mixture. The ``rate`` parameter for the\n#' :class:`~numpyro.distributions.Poisson` distribution is unknown and randomly\n#' drawn from a :class:`~numpyro.distributions.Gamma` distribution.\n#'\n#' @title GammaPoisson Distribution\n#' @description A compound distribution comprising of a gamma-poisson pair, also referred to as\n#' a gamma-poisson mixture. The ``rate`` parameter for the\n#' :class:`~numpyro.distributions.Poisson` distribution is unknown and randomly\n#' drawn from a :class:`~numpyro.distributions.Gamma` distribution.\n#'\n#' @param concentration A numeric vector, matrix, or array representing the shape parameter (alpha) of the Gamma distribution.\n#' @param rate A numeric vector, matrix, or array representing the rate parameter (beta) for the Gamma distribution.\n#' @param shape A numeric vector used to shape the distribution. When `sample=FALSE` (model building), this is used with `.expand(shape)` to set the distribution's batch shape. When `sample=TRUE` (direct sampling), this is used as `sample_shape` to draw a raw JAX array of the given shape.\n#' @param event An integer representing the number of batch dimensions to reinterpret as event dimensions (used in model building).\n#' @param mask An optional boolean vector to mask observations.\n#' @param create_obj A logical value. If `TRUE`, returns the raw NumPyro distribution object instead of creating a sample site.\n#'\n#' @return When `sample=FALSE`: A NumPyro GammaPoisson distribution object (for model\n#' building).\n#'\n#' When `sample=TRUE`: A JAX array of samples drawn from the GammaPoisson\n#' distribution (for direct sampling).\n#'\n#' When `create_obj=TRUE`: The raw NumPyro distribution object (for advanced\n#' use cases).\n#'\n#' @examples\n#' library(BI)\n#' m = importBI('cpu')\n#' bi.dist.gamma_poisson(concentration=1.0, rate=2.0, sample=TRUE)\n#'\n#' @seealso \\url{https://num.pyro.ai/en/stable/distributions.html#gammapoisson}\n#' @export\n#' @importFrom reticulate py_none tuple\n```", "gaussian_copula": "```r\n#' Gaussian Copula Distribution\n#'\n#' A distribution that links the `batch_shape[:-1]` of a marginal distribution with a multivariate Gaussian copula,\n#' modelling the correlation between the axes. A copula is a multivariate distribution over the uniform distribution\n#' on [0, 1]. The Gaussian copula links the marginal distributions through a multivariate normal distribution.\n#'\n#' .. math::\n#'     f(x_1, ..., x_d) = \\prod_{i=1}^{d} f_i(x_i) \\cdot \\phi(F_1(x_1), ..., F_d(x_d); \\mu, \\Sigma)\n#'\n#' where:\n#' - $f_i$ is the probability density function of the i-th marginal distribution.\n#' - $F_i$ is the cumulative distribution function of the i-th marginal distribution.\n#' - $\\phi$ is the standard normal PDF.\n#' - $\\mu$ is the mean vector of the multivariate normal distribution.\n#' - $\\Sigma$ is the covariance matrix of the multivariate normal distribution.\n#'\n#' @param marginal_dist Distribution: Distribution whose last batch axis is to be coupled.\n#' @param correlation_matrix array_like, optional: Correlation matrix of the coupling multivariate normal distribution. Defaults to `reticulate::py_none()`.\n#' @param correlation_cholesky array_like, optional: Correlation Cholesky factor of the coupling multivariate normal distribution. Defaults to `reticulate::py_none()`.\n#' @param shape numeric vector: A multi-purpose argument for shaping. When `sample=FALSE` (model building), this is used with `.expand(shape)` to set the distribution's batch shape. When `sample=TRUE` (direct sampling), this is used as `sample_shape` to draw a raw JAX array of the given shape.\n#' @param event int: The number of batch dimensions to reinterpret as event dimensions (used in model building).\n#' @param mask jnp.ndarray, bool, optional: Optional boolean array to mask observations. Defaults to `reticulate::py_none()`.\n#' @param create_obj bool, optional: If `TRUE`, returns the raw NumPyro distribution object instead of creating a sample site. This is essential for building complex distributions like `MixtureSameFamily`. Defaults to `FALSE`.\n#' @return NumPyro GaussianCopula distribution object: When `sample=FALSE` (for model building).\n#'         JAX array: When `sample=TRUE` (for direct sampling).\n#'         NumPyro distribution object: When `create_obj=TRUE` (for advanced use cases).\n#' @examples\n#' \\dontrun{\n#' library(BI)\n#' m = importBI('cpu')\n#' bi.dist.gaussian_copula(\n#'   marginal_dist = m.dist.beta(2.0, 5.0, create_obj = TRUE), \n#'   correlation_matrix = jnp.array(c(1.0, 0.7, 0.7, 1.0)), \n#'   sample = TRUE\n#' )\n#' }\n#' @importFrom reticulate py_none tuple\n#' @export\nbi.dist.gaussian_copula <- function(marginal_dist, correlation_matrix = reticulate::py_none(), correlation_cholesky = reticulate::py_none(), shape = c(), event = 0L, mask = reticulate::py_none(), create_obj = FALSE) {\n  NULL # Placeholder for actual implementation\n}\n```", "gaussian_copula_beta": "```r\n#' Samples from a Gaussian Copula Beta distribution.\n#'\n#' This distribution combines a Gaussian copula with a Beta distribution.\n#' The Gaussian copula models the dependence structure between random variables,\n#' while the Beta distribution defines the marginal distributions of each variable.\n#'\n#' @title GaussianCopulaBeta\n#' @description Samples from a Gaussian Copula Beta distribution.\n#' @param concentration1 A numeric vector or matrix representing the first shape parameter of the Beta distribution.\n#' @param concentration0 A numeric vector or matrix representing the second shape parameter of the Beta distribution.\n#' @param correlation_cholesky A numeric vector, matrix, or array representing the Cholesky decomposition of the correlation matrix.\n#' @param shape A numeric vector.  This is used as `sample_shape` to draw a raw JAX array of the given shape when `sample=True`.\n#' @param event Integer indicating the number of batch dimensions to reinterpret as event dimensions (used in model building).\n#' @param mask A logical vector. Optional boolean array to mask observations.\n#' @param create_obj Logical. If `TRUE`, returns the raw NumPyro distribution object instead of creating a sample site.\n#' @return A NumPyro GaussianCopulaBeta distribution object (for model building), a JAX array of samples (for direct sampling), or the raw NumPyro distribution object (for advanced use cases).\n#' @importFrom reticulate py_none tuple\n#' @export\n#'\n#' \\eqn{f(x) = \\int_{-\\infty}^{\\infty} g(x|u) h(u) du}\n#'\n#' @examples\n#' library(BI)\n#' m = importBI('cpu')\n#' bi.dist.gaussian_copula_beta(\n#'   concentration1 = jnp.array(c(2.0, 3.0)), \n#'   concentration0 = jnp.array(c(5.0, 3.0)),\n#'   correlation_cholesky = jnp.linalg.cholesky(jnp.array(matrix(c(1.0, 0.7, 0.7, 1.0), nrow = 2))), \n#'   sample = TRUE\n#' )\n#' @seealso \\url{https://num.pyro.ai/en/stable/distributions.html#gaussiancopulabetadistribution}\n```", "gaussian_random_walk": "```r\n#' Samples from a Gaussian Random Walk distribution.\n#'\n#' A Gaussian Random Walk is a stochastic process where each step is a Gaussian-distributed increment.\n#' It can be thought of as a discrete-time version of a Brownian motion.\n#'\n#' @section Mathematics:\n#'\n#' \\deqn{X_{t} = \\sum_{i=1}^{t} \\epsilon_i}\n#'\n#' where \\eqn{\\epsilon_i \\sim \\mathcal{N}(0, \\sigma^2)} are independent Gaussian random variables.\n#'\n#' @param scale A numeric value representing the standard deviation of the Gaussian increments.\n#' @param shape A numeric vector. When `sample=False` (model building), this is used with `.expand(shape)` to set the distribution's batch shape. When `sample=True` (direct sampling), this is used as `sample_shape` to draw a raw JAX array of the given shape.\n#' @param event An integer representing the number of batch dimensions to reinterpret as event dimensions (used in model building).\n#' @param mask A logical vector, matrix, or array. Optional boolean array to mask observations.\n#' @param create_obj A logical value. If `TRUE`, returns the raw NumPyro distribution object instead of creating a sample site. This is essential for building complex distributions like `MixtureSameFamily`.\n#' @return When `sample=FALSE`: A NumPyro GaussianRandomWalk distribution object (for model building).\n#'         When `sample=TRUE`: A JAX array of samples drawn from the GaussianRandomWalk distribution (for direct sampling).\n#'         When `create_obj=TRUE`: The raw NumPyro distribution object (for advanced use cases).\n#' @examples\n#' library(BI)\n#' m = importBI('cpu')\n#' bi.dist.gaussian_random_walk(scale=1.0, sample=TRUE)\n#' @export\n#' @importFrom reticulate py_none tuple\n```", "gaussian_state_space": "```r\n#' Gaussian State Space Distribution\n#'\n#' Samples from a Gaussian state space model.\n#'\n#' .. math::\n#'     \\mathbf{z}_{t} &= \\mathbf{A} \\mathbf{z}_{t - 1} + \\boldsymbol{\\epsilon}_t\\\\\n#'     &= \\sum_{k=1} \\mathbf{A}^{t-k} \\boldsymbol{\\epsilon}_t,\n#'\n#' where :math:`\\mathbf{z}_t` is the state vector at step :math:`t`, :math:`\\mathbf{A}`\n#' is the transition matrix, and :math:`\\boldsymbol\\epsilon` is the innovation noise.\n#'\n#' @param num_steps An integer representing the number of steps.\n#' @param transition_matrix A numeric vector, matrix, or array representing the state space transition matrix :math:`\\mathbf{A}`.\n#' @param covariance_matrix A numeric vector, matrix, or array representing the covariance of the innovation noise :math:`\\boldsymbol{\\epsilon}`.  Defaults to `reticulate::py_none()`.\n#' @param precision_matrix A numeric vector, matrix, or array representing the precision matrix of the innovation noise :math:`\\boldsymbol{\\epsilon}`. Defaults to `reticulate::py_none()`.\n#' @param scale_tril A numeric vector, matrix, or array representing the scale matrix of the innovation noise :math:`\\boldsymbol{\\epsilon}`. Defaults to `reticulate::py_none()`.\n#' @param shape A numeric vector specifying the shape. When `sample=FALSE` (model building), this is used with `.expand(shape)` to set the distribution's batch shape. When `sample=TRUE` (direct sampling), this is used as `sample_shape` to draw a raw JAX array of the given shape.\n#' @param event An integer representing the number of batch dimensions to reinterpret as event dimensions (used in model building).\n#' @param mask A logical vector, matrix, or array representing an optional boolean array to mask observations. Defaults to `reticulate::py_none()`.\n#' @param create_obj A logical value. If `TRUE`, returns the raw NumPyro distribution object instead of creating a sample site. Defaults to `FALSE`.\n#' @return When `sample=FALSE`: A NumPyro GaussianStateSpace distribution object (for model building).\n#'         When `sample=TRUE`: A JAX array of samples drawn from the GaussianStateSpace distribution (for direct sampling).\n#'         When `create_obj=TRUE`: The raw NumPyro distribution object (for advanced use cases).\n#' @examples\n#' library(BI)\n#' m = importBI('cpu')\n#' bi.dist.gaussian_state_space(num_steps=5, transition_matrix=jnp.array(list(c(0.5))), covariance_matrix =  jnp.array(list(list(c(1.0, 0.6), c(0.6, 1.0)))), sample=TRUE)\n#'\n#' @seealso \\url{https://num.pyro.ai/en/stable/distributions.html#gaussianstate}\n#' @importFrom reticulate py_none tuple\n#' @export\n```", "geometric": "```r\n#' Samples from a Geometric distribution.\n#'\n#' Samples from a Geometric distribution.\n#'\n#' @title geometric\n#' @description The Geometric distribution models the number of failures before the first success in a sequence of Bernoulli trials.\n#'   It is characterized by a single parameter, the probability of success on each trial.\n#'\n#' @param probs A numeric vector, matrix, or array representing the probability of success on each trial. Must be between 0 and 1.\n#' @param logits A numeric vector, matrix, or array representing the log-odds of success on each trial. `probs = jax.nn.sigmoid(logits)`.\n#' @param shape A numeric vector specifying the shape of the output.  Used to set the distribution's batch shape when `sample=FALSE` (model building) or as `sample_shape` to draw a raw JAX array of the given shape when `sample=TRUE` (direct sampling).\n#' @param event An integer representing the number of batch dimensions to reinterpret as event dimensions (used in model building).\n#' @param mask A logical vector, matrix, or array to mask observations.\n#' @param create_obj A logical value. If `TRUE`, returns the raw NumPyro distribution object instead of creating a sample site.\n#'\n#' @return When `sample=FALSE`: A NumPyro Geometric distribution object (for model building).\n#'   When `sample=TRUE`: A JAX array of samples drawn from the Geometric distribution (for direct sampling).\n#'   When `create_obj=TRUE`: The raw NumPyro distribution object (for advanced use cases).\n#'\n#' @examples\n#' library(BI)\n#' m = importBI('cpu')\n#' bi.dist.geometric(probs=0.5, sample=TRUE)\n#'\n#' @export\n#' @importFrom reticulate py_none tuple\n#' @seealso \\url{https://num.pyro.ai/en/stable/distributions.html#geometric}\n```", "geometric_logits": "```r\n#' GeometricLogits Distribution\n#'\n#' Samples from a GeometricLogits distribution, which models the number of failures\n#' before the first success in a sequence of independent Bernoulli trials. It is\n#' parameterized by logits, which are transformed into probabilities using the\n#' sigmoid function.\n#'\n#' \\deqn{P(X = k) = (1 - p)^k p}\n#'\n#' where:\n#'\n#' * X is the number of failures before the first success.\n#' * k is the number of failures.\n#' * p is the probability of success on each trial (derived from the logits).\n#'\n#' @export\n#' @importFrom reticulate py_none tuple\n#'\n#' @param logits A JAX array of logits.\n#' @param shape A numeric vector specifying the shape of the output.  When `sample=FALSE` (model building), this is used with `.expand(shape)` to set the distribution's batch shape. When `sample=TRUE` (direct sampling), this is used as `sample_shape` to draw a raw JAX array of the given shape.\n#' @param event The number of batch dimensions to reinterpret as event dimensions (used in model building).\n#' @param mask An optional boolean array to mask observations.\n#' @param create_obj A logical value. If `TRUE`, returns the raw NumPyro distribution object instead of creating a sample site.\n#'\n#' @return A NumPyro GeometricLogits distribution object (for model building) when `sample=FALSE`.\n#' A JAX array of samples drawn from the GeometricLogits distribution (for direct sampling) when `sample=TRUE`.\n#' The raw NumPyro distribution object (for advanced use cases) when `create_obj=TRUE`.\n#'\n#' @examples\n#' library(BI)\n#' m = importBI('cpu')\n#' bi.dist.geometric_logits(logits=jnp.zeros(10), sample=TRUE)\n#' @seealso \\url{https://num.pyro.ai/en/stable/distributions.html#geometriclogits}\n```", "geometric_probs": "```r\n#' Samples from a Geometric distribution.\n#'\n#' The Geometric distribution models the number of trials until the first success in a sequence of independent Bernoulli trials, where each trial has the same probability of success.\n#'\n#' @title GeometricProbs\n#'\n#' @description\n#' Samples from a Geometric distribution.\n#'\n#' @param probs A numeric vector representing the probability of success on each trial. Must be between 0 and 1.\n#' @param shape A numeric vector. When `sample=False` (model building), this is used with `.expand(shape)` to set the distribution's batch shape. When `sample=True` (direct sampling), this is used as `sample_shape` to draw a raw JAX array of the given shape.\n#' @param event An integer representing the number of batch dimensions to reinterpret as event dimensions (used in model building).\n#' @param mask A logical vector. Optional boolean array to mask observations.\n#' @param create_obj A logical value. If `TRUE`, returns the raw NumPyro distribution object instead of creating a sample site. This is essential for building complex distributions like `MixtureSameFamily`.\n#'\n#' @return A NumPyro GeometricProbs distribution object (for model building), a JAX array of samples drawn from the GeometricProbs distribution (for direct sampling), or the raw NumPyro distribution object (for advanced use cases).\n#'\n#' @examples\n#' library(BI)\n#' m = importBI('cpu')\n#' bi.dist.geometric_probs(probs=0.5, sample=TRUE)\n#'\n#' @importFrom reticulate py_none tuple\n#' @export\n```", "gompertz": "```r\n#' Gompertz Distribution\n#'\n#' The Gompertz distribution is a distribution with support on the positive real line that is closely\n#' related to the Gumbel distribution. This implementation follows the notation used in the Wikipedia\n#' entry for the Gompertz distribution. See https://en.wikipedia.org/wiki/Gompertz_distribution.\n#'\n#' The probability density function (PDF) is:\n#'\n#' \\deqn{f(x) = \\frac{con}{rate} \\exp \\left\\{ - \\frac{con}{rate} \\left [ \\exp\\{x * rate \\} - 1 \\right ] \\right\\} \\exp(-x * rate)}\n#'\n#' @export\n#' @importFrom reticulate py_none tuple\n#'\n#' @param concentration A positive numeric vector, matrix, or array representing the concentration parameter.\n#' @param rate A positive numeric vector, matrix, or array representing the rate parameter.\n#' @param shape A numeric vector representing the shape parameter.\n#' @param event Integer representing the number of batch dimensions to reinterpret as event dimensions.\n#' @param mask A boolean vector, matrix, or array representing an optional mask for observations.\n#' @param create_obj Logical value. If `TRUE`, returns the raw NumPyro distribution object instead of creating a sample site.\n#'\n#' @return A NumPyro Gompertz distribution object when `sample=FALSE` (for model building).\n#' A JAX array when `sample=TRUE` (for direct sampling).\n#' A NumPyro distribution object when `create_obj=TRUE` (for advanced use cases).\n#'\n#' @examples\n#' library(BI)\n#' m = importBI('cpu')\n#' bi.dist.gompertz(concentration = 1.0, rate = 1.0, sample = TRUE)\n#' @seealso \\url{https://num.pyro.ai/en/stable/distributions.html#gompertz}\n```", "gumbel": "```r\n#' Samples from a Gumbel (or Extreme Value) distribution.\n#'\n#' The Gumbel distribution is a continuous probability distribution named after German mathematician Carl Gumbel.\n#' It is often used to model the distribution of maximum values in a sequence of independent random variables.\n#'\n#' \\deqn{f(x) = \\frac{1}{s} e^{-(x - \\mu) / s} e^{-e^{- (x - \\mu) / s}}}\n#'\n#' @param loc Location parameter.\n#' @param scale Scale parameter. Must be positive.\n#' @param shape A numeric vector. When \\code{sample=FALSE} (model building), this is used with \\code{.expand(shape)} to set the distribution's batch shape. When \\code{sample=TRUE} (direct sampling), this is used as \\code{sample_shape} to draw a raw JAX array of the given shape.\n#' @param event The number of batch dimensions to reinterpret as event dimensions (used in model building).\n#' @param mask Optional boolean array to mask observations.\n#' @param create_obj If \\code{TRUE}, returns the raw NumPyro distribution object instead of creating a sample site.\n#'\n#' @return When \\code{sample=FALSE}: A NumPyro Gumbel distribution object (for model building).\n#'         When \\code{sample=TRUE}: A JAX array of samples drawn from the Gumbel distribution (for direct sampling).\n#'         When \\code{create_obj=TRUE}: The raw NumPyro distribution object (for advanced use cases).\n#'\n#' @examples\n#' library(BI)\n#' m = importBI('cpu')\n#' bi.dist.gumbel(loc=0.0, scale=1.0, sample=TRUE)\n#'\n#' @export\n#' @importFrom reticulate py_none tuple\n```", "half_cauchy": "```r\n#' The HalfCauchy distribution is a probability distribution that is half of the Cauchy distribution.\n#' It is defined on the positive real numbers and is often used in situations where only positive values are relevant.\n#'\n#' @title HalfCauchy Distribution\n#'\n#' @description\n#' The HalfCauchy distribution is a probability distribution that is half of the Cauchy distribution.\n#' It is defined on the positive real numbers and is often used in situations where only positive values are relevant.\n#'\n#' @deqn f(x) = \\frac{1}{2} \\cdot \\frac{1}{\\pi \\cdot \\frac{1}{scale} \\cdot (x^2 + \\frac{1}{scale^2})}\n#'\n#' @param scale A numeric vector representing the scale parameter of the Cauchy distribution. Must be positive.\n#' @param shape A numeric vector used for shaping. When `sample=False` (model building), this is used with `.expand(shape)` to set the distribution's batch shape. When `sample=True` (direct sampling), this is used as `sample_shape` to draw a raw JAX array of the given shape.\n#' @param event Integer specifying the number of batch dimensions to reinterpret as event dimensions (used in model building).\n#' @param mask A logical vector, optionally used to mask observations.\n#' @param create_obj Logical; If `TRUE`, returns the raw NumPyro distribution object instead of creating a sample site.\n#'\n#' @return When `sample=FALSE`: A NumPyro HalfCauchy distribution object (for model building).\n#'         When `sample=TRUE`: A JAX array of samples drawn from the HalfCauchy distribution (for direct sampling).\n#'         When `create_obj=TRUE`: The raw NumPyro distribution object (for advanced use cases).\n#'\n#' @examples\n#' library(BI)\n#' m = importBI('cpu')\n#' bi.dist.half_cauchy(scale=1.0, sample=TRUE)\n#'\n#' @export\n#' @importFrom reticulate py_none tuple\n#' @seealso \\url{https://num.pyro.ai/en/stable/distributions.html#halfcauchy}\n```", "half_normal": "```r\n#' Samples from a HalfNormal distribution.\n#'\n#' The HalfNormal distribution is a distribution of the absolute value of a normal random variable.\n#' It is defined by a location parameter (implicitly 0) and a scale parameter.\n#'\n#' @title HalfNormal\n#'\n#' @description\n#' Samples from a HalfNormal distribution.\n#'\n#' @param scale A numeric vector or array representing the scale parameter of the distribution. Must be positive.\n#' @param shape A numeric vector used for shaping. When `sample=FALSE` (model building),\n#'   this is used with `.expand(shape)` to set the distribution's batch shape.\n#'   When `sample=TRUE` (direct sampling), this is used as `sample_shape` to draw a raw\n#'   JAX array of the given shape.\n#' @param event An integer representing the number of batch dimensions to reinterpret as event dimensions (used in model building).\n#' @param mask A logical vector or array representing an optional boolean array to mask observations.\n#' @param create_obj A logical value. If `TRUE`, returns the raw NumPyro distribution object instead of creating a\n#'   sample site. This is essential for building complex distributions like `MixtureSameFamily`.\n#'\n#' @return\n#' When `sample=FALSE`: A NumPyro HalfNormal distribution object (for model building).\n#' When `sample=TRUE`: A JAX array of samples drawn from the HalfNormal distribution (for direct sampling).\n#' When `create_obj=TRUE`: The raw NumPyro distribution object (for advanced use cases).\n#'\n#' @examples\n#' \\dontrun{\n#' library(BI)\n#' m = importBI('cpu')\n#' bi.dist.half_normal(scale = 1.0, sample = TRUE)\n#' }\n#'\n#' @export\n#' @importFrom reticulate py_none tuple\nbi.dist.half_normal <- function(scale, shape, event, mask, create_obj) {\n  # Implementation details would go here, calling the Python function\n  # using reticulate::py_call_function() or similar.\n}\n```", "improper_uniform": "```r\n#' A helper distribution with zero log_prob over the support domain.\n#'\n#' @title ImproperUniform\n#'\n#' @description\n#' A helper distribution with zero log_prob over the support domain.\n#'\n#' @param support A constraint object.\n#' @param batch_shape A numeric vector representing the batch shape of this distribution.\n#'   It is usually safe to set `batch_shape=c()` (an empty vector).\n#' @param event_shape A numeric vector representing the event shape of this distribution.\n#' @param shape A numeric vector used for shaping. When `sample=FALSE` (model building),\n#'   this is used with `.expand(shape)` to set the distribution's batch shape.\n#'   When `sample=TRUE` (direct sampling), this is used as `sample_shape` to draw a raw\n#'   JAX array of the given shape.\n#' @param event The number of batch dimensions to reinterpret as event dimensions\n#'   (used in model building).\n#' @param mask A logical vector to mask observations.\n#' @param create_obj A logical value. If `TRUE`, returns the raw NumPyro distribution object\n#'   instead of creating a sample site. This is essential for building complex distributions\n#'   like `MixtureSameFamily`.\n#'\n#' @return When `sample=FALSE`: A NumPyro ImproperUniform distribution object (for model building).\n#'   When `sample=TRUE`: A JAX array of samples drawn from the ImproperUniform distribution\n#'   (for direct sampling).\n#'   When `create_obj=TRUE`: The raw NumPyro distribution object (for advanced use cases).\n#'\n#' @examples\n#' library(BI)\n#' m = importBI('cpu')\n#' bi.dist.improperuniform(support = constraints.ordered_vector, batch_shape = c(), event_shape = c(10))\n#'\n#' @export\n#' @importFrom reticulate py_none tuple\n#' @seealso \\url{https://num.pyro.ai/en/stable/distributions.html#improperuniform}\n```", "inverse_gamma": "```r\n#' InverseGamma Distribution\n#'\n#' The InverseGamma distribution is a two-parameter family of continuous probability\n#' distributions. It is defined by its shape and rate parameters. It is often used as a prior distribution for\n#' precision parameters (inverse variance) in Bayesian statistics.\n#'\n#' \\deqn{p(x) = \\frac{1}{Gamma(\\alpha)} \\left( \\frac{\\beta}{\\Gamma(\\alpha)} \\right)^{\\alpha} x^{\\alpha - 1} e^{-\\beta x}\n#' \\text{ for } x > 0}\n#'\n#' @param concentration A numeric vector representing the shape parameter (\\\\alpha) of the InverseGamma distribution. Must be positive.\n#' @param rate A numeric vector representing the rate parameter (\\\\beta) of the InverseGamma distribution. Must be positive.\n#' @param shape A numeric vector. When `sample=False` (model building), this is used\n#'   with `.expand(shape)` to set the distribution's batch shape. When `sample=True` (direct sampling), this is\n#'   used as `sample_shape` to draw a raw JAX array of the given shape.\n#' @param event An integer representing the number of batch dimensions to reinterpret as event dimensions (used in model building).\n#' @param mask A logical vector. Optional boolean array to mask observations.\n#' @param create_obj A logical value. If `TRUE`, returns the raw NumPyro distribution object instead of creating a sample site.\n#'   This is essential for building complex distributions like `MixtureSameFamily`.\n#'\n#' @return When `sample=FALSE`: A NumPyro InverseGamma distribution object (for model building).\n#'   When `sample=TRUE`: A JAX array of samples drawn from the InverseGamma distribution (for direct sampling).\n#'   When `create_obj=TRUE`: The raw NumPyro distribution object (for advanced use cases).\n#'\n#' @examples\n#' library(BI)\n#' m = importBI('cpu')\n#' bi.dist.inverse_gamma(concentration = 2.0, rate = 1.0, sample = TRUE)\n#'\n#' @seealso \\url{https://num.pyro.ai/en/stable/distributions.html#inversegamma}\n#' @export\n#' @importFrom reticulate py_none tuple\n```", "kumaraswamy": "```r\n#' Kumaraswamy Distribution\n#'\n#' The Kumaraswamy distribution is a continuous probability distribution defined on the interval [0, 1].\n#' It is a flexible distribution that can take on various shapes depending on its parameters.\n#'\n#' \\deqn{f(x; a, b) = a b x^{a b - 1} (1 - x)^{b - 1}}\n#'\n#' @export\n#' @importFrom reticulate py_none tuple\n#'\n#' @param concentration1 A numeric vector, matrix, or array representing the first shape parameter. Must be positive.\n#' @param concentration0 A numeric vector, matrix, or array representing the second shape parameter. Must be positive.\n#' @param shape A numeric vector. When `sample=FALSE` (model building), this is used with `.expand(shape)` to set the distribution's batch shape.\n#'   When `sample=TRUE` (direct sampling), this is used as `sample_shape` to draw a raw JAX array of the given shape.\n#' @param event An integer representing the number of batch dimensions to reinterpret as event dimensions (used in model building).\n#' @param mask A logical vector, matrix, or array. Optional boolean array to mask observations.\n#' @param create_obj A logical value. If `TRUE`, returns the raw NumPyro distribution object instead of creating a sample site.\n#'   This is essential for building complex distributions like `MixtureSameFamily`.\n#'\n#' @return When `sample=FALSE`: A NumPyro Kumaraswamy distribution object (for model building).\n#'   When `sample=TRUE`: A JAX array of samples drawn from the Kumaraswamy distribution (for direct sampling).\n#'   When `create_obj=TRUE`: The raw NumPyro distribution object (for advanced use cases).\n#'\n#' @examples\n#' library(BI)\n#' m = importBI('cpu')\n#' bi.dist.kumaraswamy(concentration1 = 2.0, concentration0 = 3.0, sample = TRUE)\n#'\n#' @seealso \\url{https://num.pyro.ai/en/stable/distributions.html#kumaraswamy}\n```", "laplace": "```r\n#' Laplace Distribution\n#'\n#' Samples from a Laplace distribution, also known as the double exponential distribution.\n#' The Laplace distribution is defined by its location parameter (loc) and scale parameter (scale).\n#'\n#' \\deqn{f(x) = \\frac{1}{2s} \\exp\\left(-\\frac{|x - \\mu|}{s}\\right)}\n#'\n#' @export\n#' @importFrom reticulate py_none tuple\n#'\n#' @param loc A numeric vector representing the location parameter of the Laplace distribution.\n#' @param scale A numeric vector representing the scale parameter of the Laplace distribution. Must be positive.\n#' @param shape A numeric vector used for shaping. When `sample=FALSE` (model building),\n#'   this is used with `.expand(shape)` to set the distribution's batch shape.\n#'   When `sample=TRUE` (direct sampling), this is used as `sample_shape` to draw a raw\n#'   JAX array of the given shape.\n#' @param event Integer representing the number of batch dimensions to reinterpret as event dimensions (used in model building).\n#' @param mask A logical vector, optionally used to mask observations.\n#' @param create_obj Logical; If TRUE, returns the raw NumPyro distribution object instead of creating a\n#'   sample site. This is essential for building complex distributions like `MixtureSameFamily`.\n#'\n#' @return When `sample=FALSE`: A NumPyro Laplace distribution object (for model building).\n#'   When `sample=TRUE`: A JAX array of samples drawn from the Laplace distribution (for direct sampling).\n#'   When `create_obj=TRUE`: The raw NumPyro distribution object (for advanced use cases).\n#'\n#' @examples\n#' library(BI)\n#' m = importBI('cpu')\n#' bi.dist.laplace(loc=0.0, scale=1.0, sample=TRUE)\n#'\n#' @seealso \\url{https://num.pyro.ai/en/stable/distributions.html#laplace}\n```", "left_truncated_distribution": "```r\n#' Samples from a left-truncated distribution.\n#'\n#' A left-truncated distribution is a probability distribution\n#' obtained by restricting the support of another distribution\n#' to values greater than a specified lower bound. This is useful\n#' when dealing with data that is known to be greater than a certain value.\n#'\n#' @section Math:\n#'\n#' \\deqn{f(x) = \\begin{cases}\n#'           \\frac{f(x)}{P(X > \\text{low})} & \\text{if } x > \\text{low} \\\\\n#'           0 & \\text{otherwise}\n#'           \\end{cases}}\n#'\n#' @param base_dist The base distribution to truncate. Must be univariate and have real support.\n#' @param low The lower truncation bound. Values less than this are excluded from the distribution.\n#' @param shape A numeric vector. When `sample=FALSE` (model building),\n#'   this is used with `.expand(shape)` to set the distribution's batch shape.\n#'   When `sample=TRUE` (direct sampling), this is used as `sample_shape` to draw a raw\n#'   JAX array of the given shape.\n#' @param event The number of batch dimensions to reinterpret as event dimensions (used in model building).\n#' @param mask An optional boolean vector to mask observations.\n#' @param create_obj A logical value. If `TRUE`, returns the raw NumPyro distribution object instead of creating a sample site.\n#'\n#' @return When `sample=FALSE`: A NumPyro LeftTruncatedDistribution distribution object (for model building).\n#'\n#' When `sample=TRUE`: A JAX array of samples drawn from the LeftTruncatedDistribution distribution (for direct sampling).\n#'\n#' When `create_obj=TRUE`: The raw NumPyro distribution object (for advanced use cases).\n#'\n#' @importFrom reticulate py_none tuple\n#' @export\n#' @examples\n#' library(BI)\n#' m = importBI('cpu')\n#' bi.dist.lefttruncateddistribution(required_args_with_defaults, sample=TRUE)\n#'\n#' @seealso \\url{https://num.pyro.ai/en/stable/distributions.html#lefttruncateddistribution}\n```", "levy": "```r\n#' Levy distribution.\n#'\n#' Samples from a Levy distribution.\n#'\n#' The probability density function is given by,\n#'\n#' \\deqn{f(x\\mid \\mu, c) = \\sqrt{\\frac{c}{2\\pi(x-\\mu)^{3}}} \\exp\\left(-\\frac{c}{2(x-\\mu)}\\right), \\qquad x > \\mu}\n#'\n#' where :math:`\\mu` is the location parameter and :math:`c` is the scale parameter.\n#'\n#' @title Levy distribution\n#' @description Samples from a Levy distribution.\n#' @param loc A numeric vector, matrix, or array representing the location parameter.\n#' @param scale A numeric vector, matrix, or array representing the scale parameter.\n#' @param shape A numeric vector used for shaping. When `sample=False` (model building), this is used with `.expand(shape)` to set the distribution's batch shape. When `sample=True` (direct sampling), this is used as `sample_shape` to draw a raw JAX array of the given shape.\n#' @param event Integer representing the number of batch dimensions to reinterpret as event dimensions (used in model building).\n#' @param mask A logical vector, matrix, or array to mask observations.\n#' @param create_obj Logical; If `TRUE`, returns the raw NumPyro distribution object instead of creating a sample site.\n#' @return A NumPyro Levy distribution object when `sample=FALSE` (for model building). A JAX array when `sample=TRUE` (for direct sampling). A NumPyro distribution object when `create_obj=TRUE` (for advanced use cases).\n#' @importFrom reticulate py_none tuple\n#' @export\n#' @examples\n#' library(BI)\n#' m = importBI('cpu')\n#' bi.dist.levy(loc=0.0, scale=1.0, sample=TRUE)\n#' @seealso \\url{https://num.pyro.ai/en/stable/distributions.html#levy}\n```", "lkj": "```r\n#' Samples from an LKJ (Lewandowski, Kurowicka, Joe) distribution for correlation matrices.\n#'\n#' The LKJ distribution is controlled by the concentration parameter :math:`\\eta` to make the\n#' probability of the correlation matrix :math:`M` proportional to :math:`\\det(M)^{\\eta - 1}`.\n#' When :math:`\\eta = 1`, the distribution is uniform over correlation matrices.\n#' When :math:`\\eta > 1`, the distribution favors samples with large determinants.\n#' When :math:`\\eta < 1`, the distribution favors samples with small determinants.\n#'\n#' @deqn P(M) \\propto |\\det(M)|^{\\eta - 1}\n#'\n#' @param dimension An integer representing the dimension of the correlation matrices.\n#' @param concentration A numeric vector representing the concentration/shape parameter of the distribution (often referred to as eta). Must be positive.\n#' @param shape A numeric vector used for shaping. When `sample=False` (model building), this is used\n#'   with `.expand(shape)` to set the distribution's batch shape. When `sample=True` (direct sampling),\n#'   this is used as `sample_shape` to draw a raw JAX array of the given shape.\n#' @param event An integer representing the number of batch dimensions to reinterpret as event dimensions (used in model building).\n#' @param mask An optional boolean vector to mask observations.\n#' @param create_obj A logical value. If `TRUE`, returns the raw NumPyro distribution object instead of creating a sample site.\n#'\n#' @return When `sample=FALSE`: A NumPyro LKJ distribution object (for model building).\n#'\n#' When `sample=TRUE`: A JAX array of samples drawn from the LKJ distribution (for direct sampling).\n#'\n#' When `create_obj=TRUE`: The raw NumPyro distribution object (for advanced use cases).\n#'\n#' @examples\n#' library(BI)\n#' m = importBI('cpu')\n#' bi.dist.lkj(dimension=2, concentration=1.0, sample=TRUE)\n#'\n#' @seealso \\url{https://num.pyro.ai/en/stable/distributions.html#lkj}\n#' @export\n#' @importFrom reticulate py_none tuple\nbi.dist.lkj <- function(dimension, concentration, shape, event, mask, create_obj) {\n  # Implementation details would go here, calling the Python function\n  # using reticulate::py_call() or similar.\n}\n```", "lkj_cholesky": "```r\n#' LKJ Cholesky Distribution\n#'\n#' The LKJ (Leonard-Kj\u00e6rgaard-J\u00f8rgensen) Cholesky distribution is a family of distributions\n#' on symmetric matrices, often used as a prior for the Cholesky decomposition of a\n#' symmetric matrix. It is particularly useful in Bayesian inference for models with\n#' covariance structure.\n#'\n#' @export\n#' @importFrom reticulate py_none tuple\n#'\n#' @param concentration Numeric. A parameter controlling the concentration of the distribution\n#'   around the identity matrix. Higher values indicate greater concentration.\n#'   Must be greater than 1.\n#'\n#' @return An object of the LKJ Cholesky distribution.\n#'\n#' @examples\n#' library(BI)\n#' m = importBI('cpu')\n#' \\dontrun{\n#'   bi.dist.lkj_cholesky(concentration = 2)\n#' }\n```", "log_normal": "```r\n#' LogNormal distribution.\n#'\n#' The LogNormal distribution is a probability distribution defined for positive real-valued random variables,\n#' parameterized by a location parameter (loc) and a scale parameter (scale).  It arises when the logarithm\n#' of a random variable is normally distributed.\n#'\n#' @title LogNormal distribution\n#' @description The LogNormal distribution is a probability distribution defined for positive real-valued random variables,\n#' parameterized by a location parameter (loc) and a scale parameter (scale).  It arises when the logarithm\n#' of a random variable is normally distributed.\n#'\n#' @param loc Numeric; Location parameter.\n#' @param scale Numeric; Scale parameter.\n#' @param shape Numeric vector; A multi-purpose argument for shaping. When `sample=False` (model building),\n#'   this is used with `.expand(shape)` to set the distribution's batch shape.\n#'   When `sample=True` (direct sampling), this is used as `sample_shape` to draw a raw JAX array\n#'   of the given shape.\n#' @param event Numeric; The number of batch dimensions to reinterpret as event dimensions (used in model building).\n#' @param mask Logical vector; Optional boolean array to mask observations.\n#' @param create_obj Logical; If True, returns the raw NumPyro distribution object instead of creating a sample\n#'   site. This is essential for building complex distributions like `MixtureSameFamily`.\n#'\n#' @return A NumPyro LogNormal distribution object (for model building).\n#'   A JAX array of samples drawn from the LogNormal distribution (for direct sampling).\n#'   The raw NumPyro distribution object (for advanced use cases).\n#'\n#' @examples\n#' library(BI)\n#' m = importBI('cpu')\n#' bi.dist.log_normal(loc = 0.0, scale = 1.0, sample = TRUE)\n#'\n#' @export\n#' @importFrom reticulate py_none tuple\n#' \\deqn{f(x) = \\frac{1}{x \\sigma \\sqrt{2\\pi}} e^{-\\frac{(log(x) - \\mu)^2}{2\\sigma^2}}}\n#' @seealso \\url{https://num.pyro.ai/en/stable/distributions.html#lognormal}\n```", "log_uniform": "```r\n#' Samples from a LogUniform distribution.\n#'\n#' The LogUniform distribution is defined over the positive real numbers and is the result of applying an exponential transformation to a uniform distribution over the interval [low, high]. It is often used when modeling parameters that must be positive.\n#'\n#' @title LogUniform\n#'\n#' @description\n#'  .. math::\n#'     f(x) = \\frac{1}{(high - low) \\log(high / low)}\n#'     \\text{ for } low \\le x \\le high\n#'\n#' @param low A numeric vector representing the lower bound of the uniform distribution's log-space. Must be positive.\n#' @param high A numeric vector representing the upper bound of the uniform distribution's log-space. Must be positive.\n#' @param shape A numeric vector specifying the shape of the output. When `sample=FALSE` (model building), this is used with `.expand(shape)` to set the distribution's batch shape. When `sample=TRUE` (direct sampling), this is used as `sample_shape` to draw a raw JAX array of the given shape.\n#' @param event Integer specifying the number of batch dimensions to reinterpret as event dimensions (used in model building).\n#' @param mask A logical vector to mask observations.\n#' @param create_obj Logical; If TRUE, returns the raw NumPyro distribution object instead of creating a sample site.\n#'\n#' @return A NumPyro LogUniform distribution object (for model building) when `sample=FALSE`.\n#'\n#' @return A JAX array of samples drawn from the LogUniform distribution (for direct sampling) when `sample=TRUE`.\n#'\n#' @return The raw NumPyro distribution object (for advanced use cases) when `create_obj=TRUE`.\n#'\n#' @examples\n#' library(BI)\n#' m = importBI('cpu')\n#' bi.dist.log_uniform(low=0.1, high=10.0, sample=TRUE)\n#'\n#' @seealso \\url{https://num.pyro.ai/en/stable/distributions.html#loguniform}\n#' @export\n#' @importFrom reticulate py_none tuple\n```", "logistic": "```r\n#' Samples from a Logistic distribution.\n#'\n#' The Logistic distribution is a continuous probability distribution defined by two parameters: location and scale. It is often used to model growth processes and is closely related to the normal distribution.\n#'\n#' @title Logistic Distribution\n#' @description Samples from a Logistic distribution.\n#' @param loc Numeric vector or single number. The location parameter, specifying the median of the distribution. Defaults to 0.0.\n#' @param scale Numeric vector or single number. The scale parameter, which determines the spread of the distribution. Must be positive. Defaults to 1.0.\n#' @param shape Numeric vector. A multi-purpose argument for shaping. When `sample=False` (model building), this is used with `.expand(shape)` to set the distribution's batch shape. When `sample=True` (direct sampling), this is used as `sample_shape` to draw a raw JAX array of the given shape.\n#' @param event Integer. The number of batch dimensions to reinterpret as event dimensions (used in model building).\n#' @param mask Logical vector. Optional boolean array to mask observations.\n#' @param create_obj Logical. If True, returns the raw NumPyro distribution object instead of creating a sample site. This is essential for building complex distributions like `MixtureSameFamily`.\n#' @return NumPyro Logistic distribution object (for model building) when `sample=False`. JAX array of samples drawn from the Logistic distribution (for direct sampling) when `sample=True`. The raw NumPyro distribution object (for advanced use cases) when `create_obj=True`.\n#' @examples\n#' library(BI)\n#' m = importBI('cpu')\n#' bi.dist.logistic(loc=0.0, scale=1.0, sample=TRUE)\n#' @export\n#' @importFrom reticulate py_none tuple\n```", "low_rank_multivariate_normal": "```r\n#' LowRankMultivariateNormal Distribution\n#'\n#' Represents a multivariate normal distribution with a low-rank covariance structure.\n#'\n#' .. math::\n#'\n#'    p(x) = \\frac{1}{\\sqrt{(2\\pi)^K |\\Sigma|}}} \\exp\\left(-\\frac{1}{2} (x - \\mu)^T \\Sigma^{-1} (x - \\mu)\\right)\n#'\n#' where:\n#'\n#' * :math:`x` is a vector of observations.\n#' * :math:`\\mu` is the mean vector.\n#' * :math:`\\Sigma` is the covariance matrix, represented in a low-rank form.\n#'\n#' @export\n#' @importFrom reticulate py_none tuple\n#'\n#' @param loc A numeric vector representing the mean vector.\n#' @param cov_factor A numeric vector or matrix used to construct the covariance matrix.\n#' @param cov_diag A numeric vector representing the diagonal elements of the covariance matrix.\n#' @return The distribution object.\n#' @examples\n#' library(BI)\n#' m = importBI('cpu')\n#' event_size <- 100\n#' rank <- 5\n#' bi.dist.low_rank_multivariate_normal(\n#'   loc = m$dist$normal(0, 1, shape = c(event_size), sample = TRUE) * 2,\n#'   cov_factor = m$dist$normal(0, 1, shape = c(event_size, rank), sample = TRUE),\n#'   cov_diag = exp(m$dist$normal(0, 1, shape = c(event_size), sample = TRUE)) * 0.1\n#' )\n#' @seealso \\url{https://num.pyro.ai/en/stable/distributions.html#lowrankmultivariatenormal}\n```", "lower_truncated_power_law": "```r\n#' Lower Truncated Power Law Distribution\n#'\n#' Lower truncated power law distribution with `alpha` index.\n#'\n#' The probability density function (PDF) is given by:\n#'\n#' \\deqn{f(x; \\alpha, a) = (-\\alpha-1)a^{-\\alpha - 1}x^{-\\alpha}, \\qquad x \\geq a, \\qquad \\alpha < -1,}\n#'\n#' where `a` is the lower bound.\n#'\n#' @param alpha A numeric vector: index of the power law distribution. Must be less than -1.\n#' @param low A numeric vector: lower bound of the distribution. Must be greater than 0.\n#' @param shape A numeric vector: A multi-purpose argument for shaping. When `sample=False` (model building), this is used\n#'   with `.expand(shape)` to set the distribution's batch shape. When `sample=True` (direct sampling), this is\n#'   used as `sample_shape` to draw a raw JAX array of the given shape.\n#' @param event Integer: The number of batch dimensions to reinterpret as event dimensions (used in model building).\n#' @param mask A logical vector: Optional boolean array to mask observations.\n#' @param create_obj Logical: If `TRUE`, returns the raw NumPyro distribution object instead of creating a sample site.\n#'   This is essential for building complex distributions like `MixtureSameFamily`.\n#'\n#' @return When `sample=FALSE`: A NumPyro LowerTruncatedPowerLaw distribution object (for model building).\n#'   When `sample=TRUE`: A JAX array of samples drawn from the LowerTruncatedPowerLaw distribution (for direct sampling).\n#'   When `create_obj=TRUE`: The raw NumPyro distribution object (for advanced use cases).\n#'\n#' @examples\n#' library(BI)\n#' m = importBI('cpu')\n#' bi.dist.lower_truncated_power_law(alpha = -2.0, low = 1.0, sample = TRUE)\n#'\n#' @seealso \\url{https://num.pyro.ai/en/stable/distributions.html#lowertruncatedpowerlaw}\n#' @export\n#' @importFrom reticulate py_none tuple\n```", "mask": "```r\n#' Compute the distribution of a given name.\n#'\n#' @description\n#' Compute the distribution of a given name.\n#'\n#' @param distributionName The name of the distribution to compute.\n#' @param shape A numeric vector representing the shape of the distribution.\n#' @param scale A numeric value representing the scale of the distribution.\n#' @param sample A logical value indicating whether to sample from the distribution. Defaults to \\code{TRUE}.\n#'\n#' @return\n#' A distribution object.\n#'\n#' @examples\n#' \\library(BI)\n#' m = importBI('cpu')\n#' bi.dist.distributionName(shape=c(10), scale=1.0, sample=TRUE)\n#'\n#' @export\n#' @importFrom reticulate py_none tuple\n```", "matrix_normal": "```r\n#' Matrix Normal Distribution\n#'\n#' Samples from a Matrix Normal distribution, which is a multivariate normal distribution over matrices.\n#' The distribution is characterized by a location matrix and two lower triangular matrices that define the correlation structure.\n#' The distribution is related to the multivariate normal distribution in the following way.\n#' If :math:`X ~ MN(loc,U,V)` then :math:`vec(X) ~ MVN(vec(loc), kron(V,U) )`.\n#'\n#' \\deqn{p(x) = \\frac{1}{2\\pi^{p/2} |\\Sigma|^{1/2}} \\exp\\left(-\\frac{1}{2} (x - \\mu)^T \\Sigma^{-1} (x - \\mu)\\right)}\n#'\n#' @export\n#' @importFrom reticulate py_none tuple\n#' @param loc A numeric vector, matrix, or array representing the location of the distribution.\n#' @param scale_tril_row A numeric vector, matrix, or array representing the lower cholesky of rows correlation matrix.\n#' @param scale_tril_column A numeric vector, matrix, or array representing the lower cholesky of columns correlation matrix.\n#' @param shape A numeric vector specifying the shape of the distribution.  Must be a vector.\n#' @param event An integer representing the number of batch dimensions to reinterpret as event dimensions.\n#' @param mask A logical vector, matrix, or array (jnp.ndarray) to mask observations.\n#' @param create_obj A logical value. If `TRUE`, returns the raw NumPyro distribution object instead of creating a sample site.\n#'\n#' @return When `sample=FALSE`: A NumPyro MatrixNormal distribution object (for model building).\n#'         When `sample=TRUE`: A JAX array of samples drawn from the MatrixNormal distribution (for direct sampling).\n#'         When `create_obj=TRUE`: The raw NumPyro distribution object (for advanced use cases).\n#'\n#' @examples\n#' library(BI)\n#' m = importBI('cpu')\n#' n_rows <- 3\n#' n_cols <- 4\n#'\n#' loc <- matrix(0, nrow = n_rows, ncol = n_cols)\n#' U_row_cov <- matrix(c(1.0, 0.5, 0.2,\n#'                        0.5, 1.0, 0.3,\n#'                        0.2, 0.3, 1.0), nrow = 3, ncol = 3)\n#' scale_tril_row <- chol(U_row_cov)\n#'\n#' V_col_cov <- matrix(c(2.0, -0.8, 0.1, 0.4,\n#'                        -0.8, 2.0, 0.2, -0.2,\n#'                        0.1, 0.2, 2.0, 0.0,\n#'                        0.4, -0.2, 0.0, 2.0), nrow = 4, ncol = 4)\n#' scale_tril_column <- chol(V_col_cov)\n#'\n#' bi.dist.matrix_normal(\n#'   oc = loc, \n#'   scale_tril_row = scale_tril_row, \n#'   scale_tril_column = scale_tril_column, \n#'   sample = TRUE\n#' )\n#'\n#' @seealso \\url{https://num.pyro.ai/en/stable/distributions.html#matrixnormal_lowercase}\n```", "mixture": "```r\n#' A marginalized finite mixture of component distributions.\n#'\n#' This distribution represents a mixture of component distributions, where the\n#' mixing weights are determined by a Categorical distribution. The resulting\n#' distribution can be either a MixtureGeneral (when component distributions\n#' are a list) or a MixtureSameFamily (when component distributions are a single\n#' distribution).\n#'\n#' @title Mixture\n#' @description A marginalized finite mixture of component distributions.\n#' @param shape A numeric vector specifying the shape of the distribution.\n#' @param event An integer representing the number of batch dimensions to reinterpret as event dimensions.\n#' @param mask A logical vector used to mask observations.\n#' @param create_obj A logical value. If `TRUE`, returns the raw NumPyro distribution object.\n#' @return When `sample=FALSE`: A NumPyro Mixture distribution object (for model building).\n#'         When `sample=TRUE`: A JAX array of samples drawn from the Mixture distribution (for direct sampling).\n#'         When `create_obj=TRUE`: The raw NumPyro distribution object (for advanced use cases).\n#' @importFrom reticulate py_none tuple\n#' @export\n#' @examples\n#' library(BI)\n#' m = importBI('cpu')\n#' \\dontrun{\n#'   # Example Usage:\n#'   # from jax import random\n#'   # import numpyro as pyro\n#'   # m = pyro.distributions.Mixture(\n#'   #     pyro.distributions.Categorical(torch.ones(2)),\n#'   #     [pyro.distributions.Normal(0, 1), pyro.distributions.Normal(2, 1)]\n#'   # )\n#'   # samples = m.sample(sample_shape=(10,))\n#' }\n#' @seealso \\url{https://num.pyro.ai/en/stable/distributions.html#mixture}\n```", "mixture_general": "```r\n#' A finite mixture of component distributions from different families.\n#'\n#' @title MixtureGeneral\n#'\n#' @description A finite mixture of component distributions from different families.\n#'\n#' @param mixing_distribution A `Categorical` distribution specifying the weights for each mixture component.\n#'   The size of this distribution specifies the number of components in the mixture.\n#' @param component_distributions A list of distributions representing the components of the mixture.\n#' @param support A constraint object specifying the support of the mixture distribution.\n#'   If not provided, the support will be inferred from the component distributions.\n#'\n#' @return When `sample=FALSE`, a NumPyro MixtureGeneral distribution object (for model building).\n#'   When `sample=TRUE`, a JAX array of samples drawn from the MixtureGeneral distribution (for direct sampling).\n#'   When `create_obj=TRUE`, the raw NumPyro distribution object (for advanced use cases).\n#'\n#' @examples\n#' library(BI)\n#' m = importBI('cpu')\n#' bi.dist.mixture_general(\n#'   mixing_distribution = m$dist$categorical(probs = jnp::array(c(0.3, 0.7)), create_obj = TRUE),\n#'   component_distributions = list(m$dist$normal(loc = 0.0, scale = 1.0, create_obj = TRUE), m$dist$normal(loc = 0.0, scale = 1.0, create_obj = TRUE)),\n#'   sample = TRUE\n#' )\n#'\n#' @importFrom reticulate py_none tuple\n#' @export\n```", "mixture_same_family": "```r\n#' A finite mixture of component distributions from the same family.\n#'\n#' This mixture only supports a mixture of component distributions that are all\n#' of the same family. The different components are specified along the last\n#' batch dimension of the input ``component_distribution``. If you need a\n#' mixture of distributions from different families, use the more general\n#' implementation in :class:`~numpyro.distributions.MixtureGeneral`.\n#'\n#' @title MixtureSameFamily\n#' @description A finite mixture of component distributions from the same family.\n#' @param loc A numeric vector, matrix, or array representing the location parameter of the component distribution.\n#' @param scale A numeric vector, matrix, or array representing the scale parameter of the component distribution.\n#' @param shape A numeric vector specifying the shape of the distribution.\n#' @param event Integer representing the number of batch dimensions to reinterpret as event dimensions (used in model building).\n#' @param mask A logical vector, matrix, or array to mask observations.\n#' @param create_obj Logical; If TRUE, returns the raw NumPyro distribution object instead of creating a sample site.\n#' @return A NumPyro MixtureSameFamily distribution object (for model building), a JAX array of samples (for direct sampling), or the raw NumPyro distribution object (for advanced use cases).\n#' @importFrom reticulate py_none tuple\n#' @export\n#'\n#' @examples\n#' library(BI)\n#' m = importBI('cpu')\n#' bi.dist.mixture_same_family(\n#'   mixing_distribution=m.dist.categorical(probs=jnp.array(c(0.3, 0.7)), create_obj = TRUE), \n#'   component_distribution=m.dist.normal(loc=0.0, scale=1.0, shape = c(2), create_obj=TRUE),\n#'   sample = TRUE\n#' )\n#'\n#' @seealso \\url{https://num.pyro.ai/en/stable/distributions.html#mixture-same-family}\n```", "multinomial": "```r\n#' Multinomial distribution.\n#'\n#' Samples from a Multinomial distribution, which models the probability of different outcomes in a sequence of independent trials, each with a fixed number of trials and a fixed set of possible outcomes.  It generalizes the binomial distribution to multiple categories.\n#'\n#' @title Multinomial\n#' @description Samples from a Multinomial distribution.\n#' @param total_count An integer or numeric vector representing the number of trials.\n#' @param probs A numeric vector representing event probabilities. Must sum to 1.\n#' @param logits A numeric vector representing event log probabilities.\n#' @param shape A numeric vector used for shaping. When `sample=FALSE` (model building), this is used with `.expand(shape)` to set the distribution's batch shape. When `sample=TRUE` (direct sampling), this is used as `sample_shape` to draw a raw JAX array of the given shape.\n#' @param event An integer representing the number of batch dimensions to reinterpret as event dimensions (used in model building).\n#' @param mask A logical vector, optional, to mask observations.\n#' @param create_obj A logical value, optional. If `TRUE`, returns the raw NumPyro distribution object instead of creating a sample site.\n#' @return When `sample=FALSE`: A NumPyro Multinomial distribution object (for model building).\n#'         When `sample=TRUE`: A numeric vector or array of samples drawn from the Multinomial distribution (for direct sampling).\n#'         When `create_obj=TRUE`: The raw NumPyro distribution object (for advanced use cases).\n#' @examples\n#' library(BI)\n#' m = importBI('cpu')\n#' bi.dist.multinomial(total_count = 10, probs = jnp.array(c(0.2, 0.3, 0.5)), sample = TRUE)\n#' @importFrom reticulate py_none tuple\n#' @export\n```", "multinomial_logits": "```r\n#' Samples from a MultinomialLogits distribution.\n#'\n#' This distribution represents the probability of observing a specific outcome from a multinomial experiment,\n#' given the logits for each outcome. The logits are the natural logarithm of the odds of each outcome.\n#'\n#' \\deqn{P(k | \\mathbf{\\pi}) = \\frac{n!}{k! (n-k)!} \\prod_{i=1}^k \\pi_i}\n#'\n#' @export\n#' @importFrom reticulate py_none tuple\n#'\n#' @param logits A numeric vector, matrix, or array representing the logits for each outcome.\n#' @param total_count A numeric vector, matrix, or array representing the total number of trials.\n#' @param shape A numeric vector specifying the shape of the distribution.  Use a vector (e.g., `c(10)`) to define the shape.\n#' @param event Integer specifying the number of batch dimensions to reinterpret as event dimensions (used in model building).\n#' @param mask A logical vector, matrix, or array to mask observations.\n#' @param create_obj Logical; If TRUE, returns the raw NumPyro distribution object instead of creating a sample site.\n#'\n#' @return A NumPyro MultinomialLogits distribution object (for model building) or a JAX array of samples (for direct sampling).\n#'\n#' @examples\n#' library(BI)\n#' m = importBI('cpu')\n#' bi.dist.multinomial_logits(logits=jnp.array(c(1.0, 0.5), dtype=jnp.float32), total_count=jnp.array(5, dtype=jnp.int32), sample=TRUE)\n#'\n#' @seealso \\url{https://num.pyro.ai/en/stable/distributions.html#multinomiallogits}\n```", "multinomial_probs": "```r\n#' Samples from a Multinomial distribution.\n#'\n#' The Multinomial distribution models the number of times each of several discrete outcomes occurs in a fixed number of trials.  Each trial independently results in one of several outcomes, and each outcome has a probability of occurring.\n#'\n#' .. math::\n#'    P(X = x) = \\frac{n!}{x_1! x_2! \\cdots x_k!} p_1^{x_1} p_2^{x_2} \\cdots p_k^{x_k}\n#'\n#' where:\n#'\n#' * n is the total number of trials.\n#' * x is a vector of counts for each outcome.\n#' * p is a vector of probabilities for each outcome.\n#'\n#' @export\n#' @importFrom reticulate py_none tuple\n#'\n#' @param probs A numeric vector of probabilities for each outcome. Must sum to 1.\n#' @param total_count The number of trials.\n#' @param shape A numeric vector. When `sample=False` (model building), this is used with `.expand(shape)` to set the distribution's batch shape. When `sample=True` (direct sampling), this is used as `sample_shape` to draw a raw JAX array of the given shape.\n#' @param event The number of batch dimensions to reinterpret as event dimensions (used in model building).\n#' @param mask An optional boolean vector to mask observations.\n#' @param create_obj Logical. If `TRUE`, returns the raw NumPyro distribution object instead of creating a sample site. This is essential for building complex distributions like `MixtureSameFamily`.\n#'\n#' @return A NumPyro MultinomialProbs distribution object (for model building), a JAX array of samples drawn from the MultinomialProbs distribution (for direct sampling), or the raw NumPyro distribution object (for advanced use cases).\n#'\n#' @examples\n#' library(BI)\n#' m = importBI('cpu')\n#' bi.dist.multinomial_probs(probs=jnp.array(c(0.2, 2*0.3, 0.5)), total_count=10, sample=TRUE)\n#' @seealso \\url{https://num.pyro.ai/en/stable/distributions.html#multinomialprobs}\n```", "multivariate_normal": "```r\n#' Samples from a Multivariate Normal distribution.\n#'\n#' The Multivariate Normal distribution, also known as the Gaussian distribution in multiple dimensions,\n#' is a probability distribution that arises frequently in statistics and machine learning. It is\n#' defined by its mean vector and covariance matrix, which describe the central tendency and\n#' spread of the distribution, respectively.\n#'\n#' .. math::\n#'     p(x) = \\frac{1}{\\sqrt{(2\\pi)^n |\\Sigma|}} \\exp\\left(-\\frac{1}{2}(x - \\mu)^T \\Sigma^{-1} (x - \\mu)\\right)\n#'\n#' where:\n#' - :math:`x` is a :math:`n`-dimensional vector of random variables.\n#' - :math:`\\mu` is the mean vector.\n#' - :math:`\\Sigma` is the covariance matrix.\n#'\n#' @export\n#' @importFrom reticulate py_none tuple\n#' @param loc A numeric vector representing the mean vector of the distribution.\n#' @param covariance_matrix A numeric vector, matrix, or array representing the covariance matrix of the distribution. Must be positive definite.\n#' @param precision_matrix A numeric vector, matrix, or array representing the precision matrix (inverse of the covariance matrix) of the distribution. Must be positive definite.\n#' @param scale_tril A numeric vector, matrix, or array representing the lower triangular Cholesky decomposition of the covariance matrix.\n#' @param shape A numeric vector representing the shape of the distribution.\n#' @param event Integer representing the number of batch dimensions to reinterpret as event dimensions (used in model building).\n#' @param mask A logical vector representing an optional boolean array to mask observations.\n#' @param create_obj Logical; If TRUE, returns the raw NumPyro distribution object instead of creating a sample site.\n#' @return When `sample=FALSE`: A NumPyro MultivariateNormal distribution object (for model building).\n#'         When `sample=TRUE`: A JAX array of samples drawn from the MultivariateNormal distribution (for direct sampling).\n#'         When `create_obj=TRUE`: The raw NumPyro distribution object (for advanced use cases).\n#' @examples\n#' library(BI)\n#' m = importBI('cpu')\n#' bi.dist.multivariate_normal(\n#'   loc = c(1.0, 0.0, -2.0), \n#'   covariance_matrix = c(c(2.0, 0.7, -0.3), c(0.7, 1.0, 0.5), c(-0.3, 0.5, 1.5)), \n#'   sample = TRUE\n#' )\n#' @seealso \\url{https://num.pyro.ai/en/stable/distributions.html#multivariate-normal}\n```", "multivariate_student_t": "```r\n#' Multivariate Student's t Distribution\n#'\n#' The Multivariate Student's t distribution is a generalization of the Student's t\n#' distribution to multiple dimensions. It is a heavy-tailed distribution that is\n#' often used to model data that is not normally distributed.\n#'\n#' \\deqn{p(x) = \\frac{1}{B(df/2, n/2)} \\frac{\\Gamma(df/2 + n/2)}{\\Gamma(df/2)}\n#' \\left(1 + \\frac{(x - \\mu)^T \\Sigma^{-1} (x - \\mu)}{df}\\right)^{-(df + n)/2}}\n#'\n#' @export\n#' @importFrom reticulate py_none tuple\n#'\n#' @param df A numeric vector representing degrees of freedom, must be positive.\n#' @param loc A numeric vector representing the location vector (mean) of the distribution.\n#' @param scale_tril A numeric matrix defining the scale (lower triangular matrix).\n#' @param shape A numeric vector. When `sample=False` (model building), this is used with `.expand(shape)` to set the distribution's batch shape. When `sample=True` (direct sampling), this is used as `sample_shape` to draw a raw JAX array of the given shape.\n#' @param event An integer representing the number of batch dimensions to reinterpret as event dimensions (used in model building).\n#' @param mask A logical vector. Optional boolean array to mask observations.\n#' @param create_obj A logical value. If `TRUE`, returns the raw NumPyro distribution object instead of creating a sample site.\n#'\n#' @return When `sample=FALSE`: A NumPyro MultivariateStudentT distribution object (for model building).\n#'         When `sample=TRUE`: A JAX array of samples drawn from the MultivariateStudentT distribution (for direct sampling).\n#'         When `create_obj=TRUE`: The raw NumPyro distribution object (for advanced use cases).\n#'\n#' @examples\n#' library(BI)\n#' m = importBI('cpu')\n#' bi.dist.multivariate_student_t(\n#'   df = c(2),\n#'   loc = c(1.0, 0.0, -2.0),\n#'   scale_tril = matrix(\n#'     c(2.0, 0.7, -0.3, 0.7, 1.0, 0.5, -0.3, 0.5, 1.5), nrow = 3, byrow = TRUE\n#'   ),\n#'   sample = TRUE\n#' )\n#'\n#' @seealso \\url{https://num.pyro.ai/en/stable/distributions.html#multivariatestudentt}\n```", "negative_binomial": "```r\n#' Samples from a NegativeBinomial distribution.\n#'\n#' The NegativeBinomial distribution models the number of failures before the first success in a sequence of independent Bernoulli trials. It is characterized by two parameters: 'total_count' (r) and 'probs' or 'logits' (p).\n#'\n#' .. math::\n#'     P(k) = \binom{k+r-1}{r-1} p^r (1-p)^k\n#'\n#' @export\n#' @importFrom reticulate py_none tuple\n#'\n#' @param total_count A numeric vector representing the total number of events.\n#' @param shape A numeric vector used for shaping. When `sample=False` (model building), this is used with `.expand(shape)` to set the distribution's batch shape. When `sample=True` (direct sampling), this is used as `sample_shape` to draw a raw JAX array of the given shape.\n#' @param event An integer representing the number of batch dimensions to reinterpret as event dimensions (used in model building).\n#' @param mask A logical vector, potentially with `TRUE` and `FALSE` values, to mask observations.\n#' @param create_obj A logical value. If `TRUE`, returns the raw NumPyro distribution object instead of creating a sample site. This is essential for building complex distributions like `MixtureSameFamily`.\n#'\n#' @return A NumPyro NegativeBinomial distribution object (for model building), a JAX array of samples drawn from the NegativeBinomial distribution (for direct sampling), or the raw NumPyro distribution object (for advanced use cases).\n#'\n#' @examples\n#' library(BI)\n#' m = importBI('cpu')\n#' bi.dist.negative_binomial(total_count = 5.0, probs = jnp.array(c(0.2, 0.3, 0.5)), sample = TRUE)\n#'\n#' @seealso \\url{https://num.pyro.ai/en/stable/distributions.html#negativebinomial}\n```", "negative_binomial2": "```r\n#' Samples from a NegativeBinomial2 distribution.\n#'\n#' This distribution is parameterized as a GammaPoisson with a modified rate.\n#' It represents the number of events occurring in a fixed amount of time or trials,\n#' where each event has a probability of success.\n#'\n#' @section Math:\n#'\n#' \\deqn{P(k) = \\frac{\\Gamma(k + \\alpha)}{\\Gamma(k + 1) \\Gamma(\\alpha)} \\left(\\frac{\\beta}{\\alpha + \\beta}\\right)^k \\left(1 - \\frac{\\beta}{\\alpha + \\beta}\\right)^k}\n#'\n#' @param mean A numeric vector, matrix, or array representing the mean of the distribution. This is equivalent to the `mu` parameter.\n#' @param concentration A numeric vector, matrix, or array representing the concentration parameter. This is equivalent to the `alpha` parameter.\n#' @param shape A numeric vector.  Used with `.expand(shape)` when `sample=False` (model building) to set the distribution's batch shape. When `sample=True` (direct sampling), used as `sample_shape` to draw a raw JAX array of the given shape.\n#' @param event An integer representing the number of batch dimensions to reinterpret as event dimensions (used in model building).\n#' @param mask An optional logical vector to mask observations.\n#' @param create_obj A logical value. If `TRUE`, returns the raw NumPyro distribution object instead of creating a sample site.\n#'\n#' @return A NumPyro NegativeBinomial2 distribution object when `sample=FALSE` (for model building).\n#'         A JAX array of samples drawn from the NegativeBinomial2 distribution (for direct sampling).\n#'         A NumPyro NegativeBinomial2 distribution object when `create_obj=TRUE` (for advanced use cases).\n#'\n#' @examples\n#' library(BI)\n#' m = importBI('cpu')\n#' bi.dist.negative_binomial2(mean=2.0, concentration=3.0, sample=TRUE)\n#'\n#' @seealso \\url{https://num.pyro.ai/en/stable/distributions.html#negativebinomial2}\n#' @export\n#' @importFrom reticulate py_none tuple\n```", "negative_binomial_logits": "```r\n#' Samples from a NegativeBinomialLogits distribution.\n#'\n#' The NegativeBinomialLogits distribution is a generalization of the Negative Binomial\n#' distribution where the parameter 'r' (number of successes) is expressed as a function\n#' of a logit parameter. This allows for more flexible modeling of count data.\n#'\n#' @title NegativeBinomialLogits\n#' @description Samples from a NegativeBinomialLogits distribution.\n#' @param total_count A numeric vector, matrix, or array representing the parameter\n#'   controlling the shape of the distribution. Represents the total number of trials.\n#' @param logits A numeric vector, matrix, or array representing the log-odds parameter.\n#'   Related to the probability of success.\n#' @param shape A numeric vector. A multi-purpose argument for shaping. When `sample=False`\n#'   (model building), this is used with `.expand(shape)` to set the distribution's batch shape.\n#'   When `sample=True` (direct sampling), this is used as `sample_shape` to draw a raw JAX\n#'   array of the given shape.\n#' @param event An integer representing the number of batch dimensions to reinterpret as event\n#'   dimensions (used in model building).\n#' @param mask A logical vector, matrix, or array. Optional boolean array to mask observations.\n#' @param create_obj A logical value. If `TRUE`, returns the raw NumPyro distribution object\n#'   instead of creating a sample site. This is essential for building complex distributions\n#'   like `MixtureSameFamily`.\n#' @return A NumPyro NegativeBinomialLogits distribution object (for model building), a JAX\n#'   array of samples drawn from the NegativeBinomialLogits distribution (for direct sampling),\n#'   or the raw NumPyro distribution object (for advanced use cases).\n#' @examples\n#' library(BI)\n#' m = importBI('cpu')\n#' bi.dist.negative_binomial_logits(total_count = 5.0, logits = 0.0, sample = TRUE)\n#' @seealso \\url{https://num.pyro.ai/en/stable/distributions.html#negativebinomiallogits}\n#' @importFrom reticulate py_none tuple\n#' @export\n```", "negative_binomial_probs": "```r\n#' Sample from a NegativeBinomial distribution with probabilities.\n#'\n#' The NegativeBinomial distribution models the number of failures before the first success in a sequence of independent Bernoulli trials.  It is characterized by two parameters: 'concentration' (r) and 'rate' (p).  In this implementation, the 'concentration' parameter is derived from 'total_count' and the 'rate' parameter is derived from 'probs'.\n#'\n#' \\deqn{P(k) = \\binom{k + r - 1}{k} p^r (1 - p)^k}\n#'\n#' @export\n#' @importFrom reticulate py_none tuple\n#'\n#' @param concentration A numeric vector or array representing the concentration parameter, derived from total_count.\n#' @param rate A numeric vector or array representing the rate parameter, derived from probs.\n#' @param shape A numeric vector.  When `sample=False` (model building), this is used with `.expand(shape)` to set the distribution's batch shape. When `sample=True` (direct sampling), this is used as `sample_shape` to draw a raw JAX array of the given shape.\n#' @param event An integer representing the number of batch dimensions to reinterpret as event dimensions (used in model building).\n#' @param mask A logical vector or array. Optional boolean array to mask observations.\n#' @param create_obj A logical value. If `TRUE`, returns the raw NumPyro distribution object instead of creating a sample site. This is essential for building complex distributions like `MixtureSameFamily`.\n#' @return A NumPyro NegativeBinomialProbs distribution object (for model building), a JAX array of samples drawn from the NegativeBinomialProbs distribution (for direct sampling), or the raw NumPyro distribution object (for advanced use cases).\n#' @examples\n#' library(BI)\n#' m = importBI('cpu')\n#' bi.dist.negative_binomial_probs(total_count=10.0, probs = jnp.array([0.2, 0.3, 0.5]), sample=True)\n#' @seealso \\url{https://num.pyro.ai/en/stable/distributions.html#negativebinomialprobs}\n```", "normal": "```r\n#' Samples from a Normal (Gaussian) distribution.\n#'\n#' The Normal distribution is characterized by its mean (loc) and standard deviation (scale).\n#' It's a continuous probability distribution that arises frequently in statistics and\n#' probability theory.\n#'\n#' \\deqn{p(x) = \\frac{1}{\\sqrt{2\\pi\\sigma^2}} \\exp\\left(-\\frac{(x-\\mu)^2}{2\\sigma^2}\\right)}\n#'\n#' @param loc A numeric vector, matrix, or array representing the mean of the distribution.\n#' @param scale A numeric vector, matrix, or array representing the standard deviation of the distribution.\n#' @param shape A numeric vector specifying the shape of the distribution.  Use a vector (e.g., `c(10)`) to define the shape.\n#' @param event An integer representing the number of batch dimensions to reinterpret as event dimensions (used in model building).\n#' @param mask A logical vector, matrix, or array. Optional boolean array to mask observations.\n#' @param create_obj A logical value. If `TRUE`, returns the raw NumPyro distribution object instead of creating a sample site.\n#'\n#' @return When `sample=FALSE`: A NumPyro Normal distribution object (for model building).\n#'\n#' When `sample=TRUE`: A JAX array of samples drawn from the Normal distribution (for direct sampling).\n#'\n#' When `create_obj=TRUE`: The raw NumPyro distribution object (for advanced use cases).\n#'\n#' @examples\n#' library(BI)\n#' m = importBI('cpu')\n#' bi.dist.normal(loc=0.0, scale=1.0, sample=TRUE)\n#'\n#' @export\n#' @importFrom reticulate py_none tuple\n```", "ordered_logistic": "```r\n#' OrderedLogistic Distribution\n#'\n#' A categorical distribution with ordered outcomes. This distribution represents the probability of an event falling into one of several ordered categories, based on a predictor variable and a set of cutpoints. The probability of an event falling into a particular category is determined by the number of categories above it.\n#'\n#' \\deqn{P(Y = k) = \\begin{cases}\n#'                1 & \\text{if } k = 0 \\\\\n#'                \\frac{1}{k} & \\text{if } k > 0\n#'            \\end{cases}}\n#'\n#' @param predictor A numeric vector, matrix, or array representing the prediction in real domain; typically this is output of a linear model.\n#' @param cutpoints A numeric vector, matrix, or array representing the positions in real domain to separate categories.\n#' @param shape A numeric vector used to shape the distribution. When `sample=False` (model building), this is used with `.expand(shape)` to set the distribution's batch shape. When `sample=True` (direct sampling), this is used as `sample_shape` to draw a raw JAX array of the given shape.\n#' @param event An integer representing the number of batch dimensions to reinterpret as event dimensions (used in model building).\n#' @param mask An optional boolean vector to mask observations.\n#' @param create_obj A logical value. If `TRUE`, returns the raw NumPyro distribution object instead of creating a sample site.\n#'\n#' @return When `sample=FALSE`: A NumPyro OrderedLogistic distribution object (for model building).\n#'         When `sample=TRUE`: A JAX array of samples drawn from the OrderedLogistic distribution (for direct sampling).\n#'         When `create_obj=TRUE`: The raw NumPyro distribution object (for advanced use cases).\n#'\n#' @examples\n#' library(BI)\n#' m = importBI('cpu')\n#' bi.dist.ordered_logistic(predictor=jnp.array(c(0.2, 0.5, 0.8)), cutpoints=jnp.array(c(-1.0, 0.0, 1.0)), sample=TRUE)\n#'\n#' @seealso \\url{https://num.pyro.ai/en/stable/distributions.html#orderedlogistic}\n#' @export\n#' @importFrom reticulate py_none tuple\nbi.dist.ordered_logistic <- function(predictor, cutpoints, shape = NULL, event = NULL, mask = NULL, create_obj = NULL) {\n  # Implementation details would go here, calling the Python function\n  # using reticulate::py_call_function() or similar.\n}\n```", "pareto": "```r\n#' Samples from a Pareto distribution.\n#'\n#' The Pareto distribution is a power-law probability distribution that is often\n#' used to model income, wealth, and the size of cities. It is defined by two\n#' parameters: alpha (shape) and scale.\n#'\n#' \\deqn{f(x) = \\frac{\\alpha \\cdot \\text{scale}^{\\alpha}}{x^{\\alpha + 1}} \\text{ for } x \\geq \\text{scale}}\n#'\n#' @export\n#' @importFrom reticulate py_none tuple\n#'\n#' @param scale A numeric vector or single number representing the scale parameter of the Pareto distribution. Must be positive.\n#' @param alpha A numeric vector or single number representing the shape parameter of the Pareto distribution. Must be positive.\n#' @param shape A numeric vector. When `sample=FALSE` (model building), this is used with `.expand(shape)` to set the distribution's batch shape. When `sample=TRUE` (direct sampling), this is used as `sample_shape` to draw a raw JAX array of the given shape.\n#' @param event An integer representing the number of batch dimensions to reinterpret as event dimensions (used in model building).\n#' @param mask A logical vector. Optional boolean array to mask observations.\n#' @param create_obj A logical value. If `TRUE`, returns the raw NumPyro distribution object instead of creating a sample site. This is essential for building complex distributions like `MixtureSameFamily`.\n#'\n#' @return When `sample=FALSE`: A NumPyro Pareto distribution object (for model building).\n#'         When `sample=TRUE`: A JAX array of samples drawn from the Pareto distribution (for direct sampling).\n#'         When `create_obj=TRUE`: The raw NumPyro distribution object (for advanced use cases).\n#'\n#' @examples\n#' library(BI)\n#' m = importBI('cpu')\n#' bi.dist.pareto(scale = 2.0, alpha = 3.0, shape = c(10), sample = TRUE)\n#'\n#' @seealso \\url{https://num.pyro.ai/en/stable/distributions.html#pareto}\n```", "plate": "```r\n#' Compute the distribution of a given name.\n#'\n#' @description\n#' Compute the distribution of a given name.\n#'\n#' @param distributionName The name of the distribution to compute.\n#' @param shape A numeric vector representing the shape of the distribution.\n#' @param scale A numeric value representing the scale of the distribution.\n#' @param sample A logical value indicating whether to sample from the distribution. Defaults to \\code{TRUE}.\n#'\n#' @return\n#' A distribution object.\n#'\n#' @examples\n#' \\library(BI)\n#' m = importBI('cpu')\n#' bi.dist.distributionName(shape=c(10), scale=1.0, sample=TRUE)\n#'\n#' @export\n#' @importFrom reticulate py_none tuple\n```", "poisson": "```r\n#' Creates a Poisson distribution, a discrete probability distribution that models the number of events occurring in a fixed interval of time or space if these events occur with a known average rate and independently of the time since the last event.\n#'\n#' @title Poisson Distribution\n#'\n#' @description\n#' A discrete probability distribution that models the number of events occurring in a fixed interval of time or space if these events occur with a known average rate and independently of the time since the last event.\n#'\n#' @deqn \\mathrm{rate}^k \\frac{e^{-\\mathrm{rate}}}{k!}\n#'\n#' @param rate A numeric vector representing the average number of events.\n#' @param shape A numeric vector used for shaping. When `sample=False` (model building), this is used with `.expand(shape)` to set the distribution's batch shape. When `sample=True` (direct sampling), this is used as `sample_shape` to draw a raw JAX array of the given shape.\n#' @param event An integer representing the number of batch dimensions to reinterpret as event dimensions (used in model building).\n#' @param mask A logical vector to mask observations.\n#' @param create_obj A logical value. If `TRUE`, returns the raw NumPyro distribution object instead of creating a sample site.\n#'\n#' @return\n#' When `sample=FALSE`: A NumPyro Poisson distribution object (for model building).\n#' When `sample=TRUE`: A JAX array of samples drawn from the Poisson distribution (for direct sampling).\n#' When `create_obj=TRUE`: The raw NumPyro distribution object (for advanced use cases).\n#'\n#' @examples\n#' library(BI)\n#' m = importBI('cpu')\n#' bi.dist.poisson(rate=2.0, sample=TRUE)\n#'\n#' @importFrom reticulate py_none tuple\n#' @export\n```", "projected_normal": "```r\n#' Samples from a ProjectedNormal distribution.\n#'\n#' This distribution over directional data is qualitatively similar to the von\n#' Mises and von Mises-Fisher distributions, but permits tractable variational\n#' inference via reparametrized gradients.\n#'\n#' \\deqn{p(x) = \\frac{1}{Z} \\exp\\left(-\\frac{1}{2\\sigma^2} ||x - \\mu||^2\\right)}\n#'\n#' @param concentration A numeric vector representing the concentration parameter,\n#'   representing the direction towards which the samples are concentrated.\n#' @param shape A numeric vector used for shaping. When `sample=FALSE` (model\n#'   building), this is used with `.expand(shape)` to set the distribution's\n#'   batch shape. When `sample=TRUE` (direct sampling), this is used as\n#'   `sample_shape` to draw a raw JAX array of the given shape.\n#' @param event The number of batch dimensions to reinterpret as event\n#'   dimensions (used in model building).\n#' @param mask An optional boolean array to mask observations.\n#' @param create_obj Logical; If `TRUE`, returns the raw NumPyro distribution\n#'   object instead of creating a sample site. This is essential for building\n#'   complex distributions like `MixtureSameFamily`.\n#'\n#' @return When `sample=FALSE`: A NumPyro ProjectedNormal distribution object\n#'   (for model building).\n#'\n#'   When `sample=TRUE`: A JAX array of samples drawn from the\n#'   ProjectedNormal distribution (for direct sampling).\n#'\n#'   When `create_obj=TRUE`: The raw NumPyro distribution object (for\n#'   advanced use cases).\n#'\n#' @examples\n#' library(BI)\n#' m = importBI('cpu')\n#' bi.dist.projected_normal(concentration=c(1.0, 3.0, 2.0), sample=TRUE)\n#'\n#' @seealso \\url{https://num.pyro.ai/en/stable/distributions.html#projectednormal}\n#' @export\n#' @importFrom reticulate py_none tuple\n```", "relaxed_bernoulli": "```r\n#' Samples from a Relaxed Bernoulli distribution.\n#'\n#' The Relaxed Bernoulli distribution is a continuous relaxation of the discrete Bernoulli distribution.\n#' It's useful for variational inference and other applications where a differentiable approximation of the Bernoulli is needed.\n#' The probability density function (PDF) is defined as:\n#'\n#' \\deqn{p(x) = \\frac{1}{2} \\left( 1 + \\tanh\\left(\\frac{x - \\beta \\log(\\frac{p}{1-p})}{1}\\right) \\right)}\n#'\n#' @export\n#' @importFrom reticulate py_none tuple\n#'\n#' @param temperature A numeric value representing the temperature parameter.\n#' @param shape A numeric vector (e.g., `c(10)`) specifying the shape. When `sample=False` (model building), this is used\n#'   with `.expand(shape)` to set the distribution's batch shape. When `sample=True` (direct sampling), this is\n#'   used as `sample_shape` to draw a raw JAX array of the given shape.\n#' @param event An integer representing the number of batch dimensions to reinterpret as event dimensions (used in model building).\n#' @param mask A logical vector or array to mask observations.\n#' @param create_obj A logical value. If `TRUE`, returns the raw NumPyro distribution object instead of creating a sample site.\n#'   This is essential for building complex distributions like `MixtureSameFamily`.\n#'\n#' @return A NumPyro RelaxedBernoulli distribution object (for model building) when `sample=FALSE`.\n#'   A JAX array of samples drawn from the RelaxedBernoulli distribution (for direct sampling) when `sample=TRUE`.\n#'   The raw NumPyro distribution object (for advanced use cases) when `create_obj=TRUE`.\n#'\n#' @examples\n#' library(BI)\n#' m = importBI('cpu')\n#' bi.dist.relaxed_bernoulli(temperature = 1.0, probs = jnp.array(c(0.2, 0.3, 0.5)), sample = TRUE)\n#'\n#' @seealso \\url{https://num.pyro.ai/en/stable/distributions.html#relaxedbernoulli}\n```", "relaxed_bernoulli_logits": "```r\n#' Relaxed Bernoulli Logits Distribution.\n#'\n#' Represents a relaxed version of the Bernoulli distribution, parameterized by logits and a temperature.\n#' The temperature parameter controls the sharpness of the distribution. The distribution is defined\n#' by transforming the output of a Logistic distribution through a sigmoid function.\n#'\n#' @section Math:\n#'\n#' \\deqn{P(x) = \\sigma\\left(\\frac{x}{\\text{temperature}}\\right)}\n#'\n#' @param temperature A numeric vector or matrix representing the temperature parameter, must be positive.\n#' @param logits A numeric vector or matrix representing the logits parameter.\n#' @param shape A numeric vector specifying the shape of the distribution.  When `sample=False` (model building),\n#'   this is used with `.expand(shape)` to set the distribution's batch shape. When `sample=True`\n#'   (direct sampling), this is used as `sample_shape` to draw a raw JAX array of the given shape.\n#' @param event An integer representing the number of batch dimensions to reinterpret as event dimensions (used in model building).\n#' @param mask A logical vector indicating observations to mask.\n#' @param create_obj A logical value. If `TRUE`, returns the raw NumPyro distribution object instead of creating a sample\n#'   site. This is essential for building complex distributions like `MixtureSameFamily`.\n#'\n#' @return A NumPyro RelaxedBernoulliLogits distribution object (for model building), a JAX array of samples\n#'   drawn from the RelaxedBernoulliLogits distribution (for direct sampling), or the raw NumPyro distribution object (for advanced use cases).\n#'\n#' @examples\n#' library(BI)\n#' m = importBI('cpu')\n#' bi.dist.relaxed_bernoulli_logits(temperature = 1.0, logits = 0.0, sample = TRUE)\n#'\n#' @seealso \\url{https://num.pyro.ai/en/stable/distributions.html#relaxed-bernoulli-logits}\n#' @export\n#' @importFrom reticulate py_none tuple\nbi.dist.relaxed_bernoulli_logits <- function(temperature, logits, shape, event, mask, create_obj) {\n  # Placeholder for the actual implementation.\n  # Replace with the appropriate call to the Python function.\n  NULL\n}\n```", "right_truncated_distribution": "```r\n#' Samples from a right-truncated distribution.\n#'\n#' This distribution truncates the base distribution at a specified high value.  Values greater than `high` are discarded,\n#' effectively creating a distribution that is only supported up to that point. This is useful for modeling data\n#' where observations are only possible within a certain range.\n#'\n#' @title RightTruncatedDistribution\n#'\n#' @param base_dist The base distribution to truncate. Must be a univariate distribution with real support.\n#' @param shape A numeric vector. When `sample=FALSE` (model building), this is used with `.expand(shape)` to set the distribution's batch shape. When `sample=TRUE` (direct sampling), this is used as `sample_shape` to draw a raw JAX array of the given shape.\n#' @param event The number of batch dimensions to reinterpret as event dimensions (used in model building).\n#' @param mask An optional boolean vector to mask observations.\n#' @param create_obj Logical. If `TRUE`, returns the raw NumPyro distribution object instead of creating a sample site.\n#' @return When `sample=FALSE`: A NumPyro RightTruncatedDistribution distribution object (for model building).\n#'        When `sample=TRUE`: A JAX array of samples drawn from the RightTruncatedDistribution distribution (for direct sampling).\n#'        When `create_obj=TRUE`: The raw NumPyro distribution object (for advanced use cases).\n#' @deqn f(x) = \\frac{f(x)}{P(X \\le high)}\n#' @examples\n#' library(BI)\n#' m = importBI('cpu')\n#' bi.dist.right_truncated_distribution(base_dist = m.dist.normal(0,1, create_obj = TRUE), high=0, sample=TRUE)\n#' @export\n#' @importFrom reticulate py_none tuple\n```", "sine_skewed": "```r\n#' Sine Skewed Distribution\n#'\n#' Sine-skewing [1] is a procedure for producing a distribution that breaks pointwise symmetry on a torus distribution. The new distribution is called the Sine Skewed X distribution, where X is the name of the (symmetric) base distribution. Torus distributions are distributions with support on products of circles (i.e., :math:`\\otimes S^1` where :math:`S^1 = [-pi,pi)`).\n#' So, a 0-torus is a point, the 1-torus is a circle, and the 2-torus is commonly associated with the donut shape.\n#'\n#' @seealso \\url{https://num.pyro.ai/en/stable/distributions.html#sineskewed}\n#'\n#' @param base_dist Base density on a d-dimensional torus. Supported base distributions include: 1D `VonMises`, `SineBivariateVonMises`, 1D `ProjectedNormal`, and `Uniform` (-pi, pi).\n#' @param skewness Skewness of the distribution. A numeric vector.\n#' @return An object of class `SineSkewed`.\n#'\n#' @examples\n#' library(BI)\n#' m = importBI('cpu')\n#' bi.dist.sineskewed(required_args_with_defaults, sample=TRUE)\n#'\n#' @export\n#' @importFrom reticulate py_none tuple\nbi.dist.sineskewed <- function(base_dist, skewness) {\n  # Placeholder for actual implementation\n  NULL\n}\n```", "soft_laplace": "```r\n#' Samples from a SoftLaplace distribution.\n#'\n#' This distribution is a smooth approximation of a Laplace distribution,\n#' characterized by its log-convex density. It offers Laplace-like tails\n#' while being infinitely differentiable, making it suitable for HMC and\n#' Laplace approximation.\n#'\n#' @section Math:\n#' \\deqn{f(x) = \\log(2 / \\pi) - \\log(scale) - \\logaddexp((x - loc) / scale, -(x - loc) / scale)}\n#'\n#' @param loc Location parameter.\n#' @param scale Scale parameter.\n#' @param shape A numeric vector specifying the shape. When `sample=FALSE` (model building), this is used with `.expand(shape)` to set the distribution's batch shape. When `sample=TRUE` (direct sampling), this is used as `sample_shape` to draw a raw JAX array of the given shape.\n#' @param event The number of batch dimensions to reinterpret as event dimensions (used in model building).\n#' @param mask An optional boolean vector to mask observations.\n#' @param create_obj Logical; If `TRUE`, returns the raw NumPyro distribution object instead of creating a sample site.\n#'\n#' @return When `sample=FALSE`: A NumPyro SoftLaplace distribution object (for model building).\n#'         When `sample=TRUE`: A JAX array of samples drawn from the SoftLaplace distribution (for direct sampling).\n#'         When `create_obj=TRUE`: The raw NumPyro distribution object (for advanced use cases).\n#'\n#' @examples\n#' library(BI)\n#' m = importBI('cpu')\n#' bi.dist.soft_laplace(loc=0.0, scale=1.0, sample=TRUE)\n#'\n#' @export\n#' @importFrom reticulate py_none tuple\n```", "student_t": "```r\n#' Student's t-distribution.\n#'\n#' The Student's t-distribution is a probability distribution that arises in hypothesis testing involving the mean of a normally distributed population when the population standard deviation is unknown. It is similar to the normal distribution, but has heavier tails, making it more robust to outliers.\n#'\n#' \\deqn{f(x) = \\frac{1}{\\Gamma(\\nu/2) \\sqrt{\\nu \\pi}} \\left(1 + \\frac{x^2}{\\nu}\\right)^{-(\\nu+1)/2}}\n#'\n#' @param df A numeric vector representing degrees of freedom, must be positive.\n#' @param loc A numeric vector representing the location parameter, defaults to 0.0.\n#' @param scale A numeric vector representing the scale parameter, defaults to 1.0.\n#' @param shape A numeric vector. When `sample=False` (model building), this is used with `.expand(shape)` to set the distribution's batch shape. When `sample=True` (direct sampling), this is used as `sample_shape` to draw a raw JAX array of the given shape.\n#' @param event Integer representing the number of batch dimensions to reinterpret as event dimensions (used in model building).\n#' @param mask A logical vector to mask observations.\n#' @param create_obj Logical. If `TRUE`, returns the raw NumPyro distribution object instead of creating a sample site. This is essential for building complex distributions like `MixtureSameFamily`.\n#'\n#' @return When `sample=FALSE`: A NumPyro StudentT distribution object (for model building).\n#'         When `sample=TRUE`: A JAX array of samples drawn from the StudentT distribution (for direct sampling).\n#'         When `create_obj=TRUE`: The raw NumPyro distribution object (for advanced use cases).\n#'\n#' @examples\n#' library(BI)\n#' m = importBI('cpu')\n#' bi.dist.student_t(df = 2, loc=0.0, scale=1.0, sample=TRUE)\n#'\n#' @seealso \\url{https://num.pyro.ai/en/stable/distributions.html#studentt}\n#' @export\n#' @importFrom reticulate py_none tuple\n```", "truncated_cauchy": "```r\n#' Truncated Cauchy Distribution\n#'\n#' Samples from a Truncated Cauchy distribution.\n#'\n#' The Cauchy distribution, also known as the Lorentz distribution, is a continuous probability distribution\n#' that appears frequently in various areas of mathematics and physics. It is characterized by its heavy tails,\n#' which extend to infinity. The truncated version limits the support of the Cauchy distribution to a specified interval.\n#'\n#' \\deqn{f(x) = \\frac{1}{\\pi \\cdot c \\cdot (1 + ((x - b) / c)^2)}  \\text{ for } a < x < b}\n#'\n#' @param loc Location parameter of the Cauchy distribution.\n#' @param scale Scale parameter of the Cauchy distribution.\n#' @param shape A numeric vector. When `sample=False` (model building),\n#'   this is used with `.expand(shape)` to set the distribution's batch shape.\n#'   When `sample=True` (direct sampling), this is used as `sample_shape` to draw a raw JAX array of the given shape.\n#' @param event The number of batch dimensions to reinterpret as event dimensions (used in model building).\n#' @param mask An optional boolean array to mask observations.\n#' @param create_obj Logical; If `TRUE`, returns the raw NumPyro distribution object instead of creating a sample site.\n#'   This is essential for building complex distributions like `MixtureSameFamily`.\n#'\n#' @return A NumPyro TruncatedCauchy distribution object (for model building) when `sample=FALSE`.\n#'\n#' A JAX array of samples drawn from the TruncatedCauchy distribution (for direct sampling) when `sample=TRUE`.\n#'\n#' The raw NumPyro distribution object (for advanced use cases) when `create_obj=TRUE`.\n#'\n#' @examples\n#' library(BI)\n#' m = importBI('cpu')\n#' bi.dist.truncated_cauchy(loc=0.0, scale=1.0, sample=TRUE)\n#'\n#' @importFrom reticulate py_none tuple\n#' @export\n```", "truncated_distribution": "```r\n#' Samples from a Truncated Distribution.\n#'\n#' This distribution represents a base distribution truncated between specified lower and upper bounds.\n#' The truncation modifies the probability density function (PDF) of the base distribution,\n#' effectively removing observations outside the defined interval.\n#'\n#' @title TruncatedDistribution\n#'\n#' @description\n#' Samples from a Truncated Distribution.\n#' This distribution represents a base distribution truncated between specified lower and upper bounds.\n#' The truncation modifies the probability density function (PDF) of the base distribution,\n#' effectively removing observations outside the defined interval.\n#'\n#' @deqn p(x) = \\frac{p(x)}{P(\\text{lower} \\le x \\le \\text{upper})}\n#'\n#' @param base_dist The base distribution to be truncated. This should be a univariate\n#'   distribution. Currently, only the following distributions are supported:\n#'   Cauchy, Laplace, Logistic, Normal, and StudentT.\n#' @param shape A numeric vector (e.g., `c(10)`) specifying the shape. When `sample=FALSE`\n#'   (model building), this is used with `.expand(shape)` to set the distribution's\n#'   batch shape. When `sample=TRUE` (direct sampling), this is used as `sample_shape`\n#'   to draw a raw JAX array of the given shape.\n#' @param event The number of batch dimensions to reinterpret as event dimensions\n#'   (used in model building).\n#' @param mask An optional boolean array to mask observations.\n#' @param create_obj Logical; If `TRUE`, returns the raw NumPyro distribution object\n#'   instead of creating a sample site. This is essential for building complex distributions\n#'   like `MixtureSameFamily`.\n#'\n#' @return When `sample=FALSE`: A NumPyro TruncatedDistribution distribution object (for model building).\n#'   When `sample=TRUE`: A JAX array of samples drawn from the TruncatedDistribution distribution (for direct sampling).\n#'   When `create_obj=TRUE`: The raw NumPyro distribution object (for advanced use cases).\n#'\n#' @examples\n#' library(BI)\n#' m = importBI('cpu')\n#' bi.dist.truncated_distribution(base_dist = m.dist.normal(0,1, create_obj = TRUE), high=1, low = 0, sample=TRUE)\n#'\n#' @seealso \\url{https://num.pyro.ai/en/stable/distributions.html#truncateddistribution}\n#' @export\n#' @importFrom reticulate py_none tuple\nbi.dist.truncated_distribution <- function(base_dist, shape, event, mask = NULL, create_obj = FALSE, sample = TRUE) {\n  # Implementation details would go here.  This is just a placeholder.\n}\n```", "truncated_normal": "```r\n#' Truncated Normal Distribution\n#'\n#' The Truncated Normal distribution is a normal distribution truncated\n#' to a specified interval. It is defined by its location (`loc`), scale\n#' (`scale`), lower bound (`low`), and upper bound (`high`).\n#'\n#' @title Truncated Normal Distribution\n#' @description The Truncated Normal distribution is a normal distribution truncated\n#' to a specified interval. It is defined by its location (`loc`), scale\n#' (`scale`), lower bound (`low`), and upper bound (`high`).\n#'\n#' @param loc The location parameter of the normal distribution.\n#' @param scale The scale parameter of the normal distribution.\n#' @param shape A numeric vector (e.g., `c(10)`) used to shape the distribution.\n#'   When `sample=False` (model building), this is used with `.expand(shape)` to set the\n#'   distribution's batch shape. When `sample=True` (direct sampling),\n#'   this is used as `sample_shape` to draw a raw JAX array of the\n#'   given shape.\n#' @param event The number of batch dimensions to reinterpret as event\n#'   dimensions (used in model building).\n#' @param mask An optional boolean array to mask observations.\n#' @param create_obj Logical; If `TRUE`, returns the raw NumPyro distribution\n#'   object instead of creating a sample site.\n#'\n#' @return A NumPyro TruncatedNormal distribution object (for model building).\n#'   A JAX array of samples drawn from the TruncatedNormal distribution (for\n#'   direct sampling).\n#'   The raw NumPyro distribution object (for advanced use cases).\n#'\n#' @examples\n#' library(BI)\n#' m = importBI('cpu')\n#' bi.dist.truncated_normal(loc = 0.0, scale = 1.0, sample = TRUE)\n#'\n#' @export\n#' @importFrom reticulate py_none tuple\n```", "truncated_polya_gamma": "```r\n#' TruncatedPolyaGamma Distribution\n#'\n#' Samples from a TruncatedPolyaGamma distribution.\n#'\n#' This distribution is a truncated version of the PolyaGamma distribution,\n#' defined over the interval [0, truncation_point]. It is often used in\n#' Bayesian non-parametric models.\n#'\n#' \\deqn{p(x) = \\frac{1}{Z} \\exp\\left( \\sum_{n=0}^{N} \\left( \\log(2n+1) - 1.5 \\log(x) - \\frac{(2n+1)^2}{4x} \\right) \\right)}\n#'\n#' @param batch_shape A numeric vector specifying the shape of the batch dimension.\n#' @param event An integer representing the number of batch dimensions to reinterpret as event dimensions.\n#' @param mask A numeric vector, matrix, or array (e.g., a JAX array) of boolean values to mask observations.\n#' @param create_obj A logical value. If `TRUE`, returns the raw NumPyro distribution object instead of creating a sample site.\n#'\n#' @return A JAX array of samples drawn from the TruncatedPolyaGamma distribution (when `sample=TRUE`).\n#'\n#' @importFrom reticulate py_none tuple\n#' @export\n#'\n#' @examples\n#' library(BI)\n#' m = importBI('cpu')\n#' bi.dist.truncated_polya_gamma(batch_shape = c(), sample = TRUE)\n```", "two_sided_truncated_distribution": "```r\n#' Two-Sided Truncated Distribution\n#'\n#' This distribution truncates a base distribution between two specified lower and upper bounds.\n#'\n#' .. math::\n#'     f(x) = \\begin{cases}\n#'         \\frac{p(x)}{P(\\text{low} \\le X \\le \\text{high})} & \\text{if } \\text{low} \\le x \\le \\text{high} \\\\\n#'         0 & \\text{otherwise}\n#'     \\end{cases}\n#'\n#' where :math:`p(x)` is the probability density function of the base distribution.\n#'\n#' @export\n#' @importFrom reticulate py_none tuple\n#'\n#' @param base_dist The base distribution to truncate.\n#' @param low The lower bound for truncation.\n#' @param high The upper bound for truncation.\n#' @param sample Logical; if `TRUE`, returns JAX array of samples.  Defaults to `FALSE`.\n#' @param create_obj Logical; if `TRUE`, returns the raw NumPyro distribution object. Defaults to `FALSE`.\n#'\n#' @return When `sample=FALSE`: A NumPyro TwoSidedTruncatedDistribution distribution object (for model building).\n#'         When `sample=TRUE`: A JAX array of samples drawn from the TwoSidedTruncatedDistribution distribution (for direct sampling).\n#'         When `create_obj=True`: The raw NumPyro distribution object (for advanced use cases).\n#'\n#' @examples\n#' library(BI)\n#' m = importBI('cpu')\n#' \\dontrun{\n#' bi.dist.twosidedtruncateddistribution(base_dist = m$Normal(loc=0, scale=1), low = -1, high = 1)\n#' bi.dist.twosidedtruncateddistribution(base_dist = m$Normal(loc=0, scale=1), low = -1, high = 1, sample = TRUE)\n#' bi.dist.twosidedtruncateddistribution(base_dist = m$Normal(loc=0, scale=1), low = -1, high = 1, create_obj = TRUE)\n#' }\n#'\n#' @seealso \\url{https://num.pyro.ai/en/stable/distributions.html#twosidedtruncateddistribution}\n```", "uniform": "```r\n#' Samples from a Uniform distribution, which is a continuous probability distribution\n#' where all values within a given interval are equally likely.\n#'\n#' @title Uniform Distribution\n#'\n#' @description\n#' Samples from a Uniform distribution, which is a continuous probability distribution\n#' where all values within a given interval are equally likely.\n#'\n#' \\deqn{f(x) = \\frac{1}{b - a}, \\text{ for } a \\le x \\le b}\n#'\n#' @param low A numeric vector, matrix, or array representing the lower bound of the uniform interval.\n#' @param high A numeric vector, matrix, or array representing the upper bound of the uniform interval.\n#' @param shape A numeric vector specifying the shape of the output. When `sample=FALSE` (model building),\n#'   this is used with `.expand(shape)` to set the distribution's batch shape.\n#'   When `sample=TRUE` (direct sampling), this is used as `sample_shape` to draw a raw JAX array of the given shape.\n#' @param event An integer representing the number of batch dimensions to reinterpret as event dimensions\n#'   (used in model building).\n#' @param mask A logical vector, matrix, or array (optional) to mask observations.\n#' @param create_obj A logical value. If `TRUE`, returns the raw NumPyro distribution object\n#'   instead of creating a sample site.\n#'\n#' @return A NumPyro Uniform distribution object (for model building) when `sample=FALSE`.\n#'\n#' A JAX array of samples drawn from the Uniform distribution (for direct\n#' sampling) when `sample=TRUE`.\n#'\n#' The raw NumPyro distribution object (for advanced use cases) when\n#' `create_obj=TRUE`.\n#'\n#' @examples\n#' library(BI)\n#' m = importBI('cpu')\n#' bi.dist.uniform(low=0.0, high=1.0, sample=TRUE)\n#'\n#' @importFrom reticulate py_none tuple\n#' @export\n```", "unit": "```r\n#' Samples from a Unit distribution.\n#'\n#' The Unit distribution is a trivial, non-normalized distribution representing the unit type.\n#' It has a single value with no data, effectively a placeholder often used in probabilistic programming\n#' for situations where no actual data is involved.\n#'\n#' .. math::\n#'     p(x) = 1\n#'\n#' @export\n#' @importFrom reticulate py_none tuple\n#'\n#' @param log_factor A numeric vector or array. Log factor for the unit distribution.\n#' @param shape A numeric vector.  A multi-purpose argument for shaping. When `sample=False` (model building),\n#'   this is used with `.expand(shape)` to set the distribution's batch shape. When `sample=True`\n#'   (direct sampling), this is used as `sample_shape` to draw a raw JAX array of the given shape.\n#' @param event Integer. The number of batch dimensions to reinterpret as event dimensions (used in model building).\n#' @param mask A logical vector or array. Optional boolean array to mask observations.\n#' @param create_obj Logical. If `TRUE`, returns the raw NumPyro distribution object instead of creating a sample\n#'   site. This is essential for building complex distributions like `MixtureSameFamily`.\n#'\n#' @return A NumPyro Unit distribution object when `sample=FALSE` (for model building).\n#'   A JAX array of samples drawn from the Unit distribution (for direct sampling).\n#'   A NumPyro Unit distribution object when `create_obj=TRUE` (for advanced use cases).\n#'\n#' @examples\n#' library(BI)\n#' m = importBI('cpu')\n#' bi.dist.unit(log_factor=jnp::ones(5), sample=TRUE)\n#' @seealso \\url{https://num.pyro.ai/en/stable/distributions.html#unit}\n```", "weibull": "```r\n#' Samples from a Weibull distribution.\n#'\n#' The Weibull distribution is a versatile distribution often used to model failure rates in engineering and reliability studies. It is characterized by its shape and scale parameters.\n#'\n#' \\deqn{f(x) = \\frac{\\beta}{\\alpha} \\left(\\frac{x}{\\alpha}\\right)^{\\beta - 1} e^{-\\left(\\frac{x}{\\alpha}\\right)^{\\beta}} \\text{ for } x \\ge 0}\n#'\n#' where :math:`\\alpha` is the scale parameter and :math:`\\beta` is the shape parameter.\n#'\n#' @param scale A numeric vector, matrix, or array representing the scale parameter of the Weibull distribution. Must be positive.\n#' @param concentration A numeric vector, matrix, or array representing the shape parameter of the Weibull distribution. Must be positive.\n#' @param shape A numeric vector.  This is used with `.expand(shape)` when `sample=False` (model building) to set the distribution's batch shape. When `sample=True` (direct sampling), this is used as `sample_shape` to draw a raw JAX array of the given shape.\n#' @param event An integer representing the number of batch dimensions to reinterpret as event dimensions (used in model building).\n#' @param mask An optional boolean vector to mask observations.\n#' @param create_obj A logical value. If `TRUE`, returns the raw NumPyro distribution object instead of creating a sample site.\n#'\n#' @return A NumPyro Weibull distribution object (for model building) when `sample=FALSE`.\n#' A JAX array of samples drawn from the Weibull distribution (for direct sampling) when `sample=TRUE`.\n#' The raw NumPyro distribution object (for advanced use cases) when `create_obj=TRUE`.\n#'\n#' @examples\n#' library(BI)\n#' m = importBI('cpu')\n#' bi.dist.weibull(scale=1.0, concentration=2.0, sample=TRUE)\n#'\n#' @seealso \\url{https://num.pyro.ai/en/stable/distributions.html#weibull}\n#' @export\n#' @importFrom reticulate py_none tuple\nbi.dist.weibull <- function(scale, concentration, shape = NULL, event = NULL, mask = NULL, create_obj = FALSE) {\n  # Placeholder for actual implementation\n  NULL\n}\n```", "wishart": "```r\n#' Wishart distribution for covariance matrices.\n#'\n#' The Wishart distribution is a multivariate distribution used to model positive definite matrices,\n#' often representing covariance matrices. It's commonly used in Bayesian statistics and machine learning,\n#' particularly in models involving covariance estimation.\n#'\n#' @param concentration A positive concentration parameter analogous to the\n#'   concentration of a Gamma distribution. The concentration must be larger\n#'   than the dimensionality of the scale matrix.\n#' @param scale_matrix A scale matrix analogous to the inverse rate of a Gamma\n#'   distribution.\n#' @param rate_matrix A rate matrix anaologous to the rate of a Gamma\n#'   distribution.\n#' @param scale_tril Cholesky decomposition of the `scale_matrix`.\n#' @param shape A numeric vector specifying the shape. When `sample=False`\n#'   (model building), this is used with `.expand(shape)` to set the\n#'   distribution's batch shape. When `sample=True` (direct sampling), this is\n#'   used as `sample_shape` to draw a raw JAX array of the given shape.\n#' @param event The number of batch dimensions to reinterpret as event dimensions\n#'   (used in model building).\n#' @param mask An optional boolean array to mask observations.\n#' @param create_obj If `TRUE`, returns the raw NumPyro distribution object\n#'   instead of creating a sample site. This is essential for building complex\n#'   distributions like `MixtureSameFamily`.\n#'\n#' @return When `sample=FALSE`: A NumPyro Wishart distribution object (for model\n#'   building). When `sample=TRUE`: A JAX array of samples drawn from the\n#'   Wishart distribution (for direct sampling). When `create_obj=TRUE`: The raw\n#'   NumPyro distribution object (for advanced use cases).\n#'\n#' @examples\n#' library(BI)\n#' m = importBI('cpu')\n#' bi.dist.wishart(concentration = 5.0, scale_matrix = jnp.eye(2), sample = TRUE)\n#'\n#' @seealso \\url{https://num.pyro.ai/en/stable/distributions.html#wishart}\n#'\n#' @export\n#' @importFrom reticulate py_none tuple\nbi.dist.wishart <- function(concentration, scale_matrix, rate_matrix, scale_tril, shape, event, mask, create_obj) {\n  # Implementation details would go here, calling the Python function\n  # using reticulate::py_call_function.\n}\n```", "wishart_cholesky": "```r\n#' WishartCholesky Distribution\n#'\n#' The Wishart distribution is a multivariate distribution used as a prior distribution\n#' for covariance matrices. This implementation represents the distribution in terms\n#' of its Cholesky decomposition.\n#'\n#' @title WishartCholesky Distribution\n#' @description The Wishart distribution is a multivariate distribution used as a prior distribution\n#' for covariance matrices. This implementation represents the distribution in terms\n#' of its Cholesky decomposition.\n#'\n#' @param concentration (numeric or vector) Positive concentration parameter analogous to the\n#'   concentration of a `Gamma` distribution. The concentration must be larger\n#'   than the dimensionality of the scale matrix.\n#' @param scale_matrix (numeric vector, matrix, or array, optional) Scale matrix analogous to the inverse rate of a `Gamma`\n#'   distribution. If not provided, `rate_matrix` or `scale_tril` must be.\n#' @param rate_matrix (numeric vector, matrix, or array, optional) Rate matrix anaologous to the rate of a `Gamma`\n#'   distribution. If not provided, `scale_matrix` or `scale_tril` must be.\n#' @param scale_tril (numeric vector, matrix, or array, optional) Cholesky decomposition of the `scale_matrix`.\n#'   If not provided, `scale_matrix` or `rate_matrix` must be.\n#' @return A WishartCholesky distribution object.\n#'\n#' @examples\n#' library(BI)\n#' m = importBI('cpu')\n#' \\dontrun{\n#' bi.dist.wishartcholesky(concentration = c(10), scale_matrix = matrix(1:4, nrow = 2), scale_tril = matrix(1:4, nrow = 2))\n#' }\n#'\n#' @export\n#' @importFrom reticulate py_none tuple\n```", "zero_inflated_distribution": "```r\n#' Generic Zero Inflated distribution.\n#'\n#' A Zero-Inflated distribution combines a base distribution with a Bernoulli\n#' distribution to model data with an excess of zero values. It assumes that each observation\n#' is either drawn from the base distribution or is a zero with probability determined\n#' by the Bernoulli distribution (the \"gate\"). This is useful for modeling data\n#' where zeros are more frequent than expected under a single distribution,\n#' often due to a different underlying process.\n#'\n#' @section Mathematics:\n#'\n#' \\deqn{P(x) = \\pi \\cdot I(x=0) + (1 - \\pi) \\cdot P_{base}(x)}\n#'\n#' where:\n#' - $P_{base}(x)$ is the probability density function (PDF) or probability mass function (PMF) of the base distribution.\n#' - $\\pi$ is the probability of generating a zero, governed by the Bernoulli gate.\n#' - $I(x=0)$ is an indicator function that equals 1 if x=0 and 0 otherwise.\n#'\n#' @param base_dist Distribution: The base distribution to be zero-inflated (e.g., Poisson, NegativeBinomial).\n#' @param gate numeric(1): Probability of extra zeros (between 0 and 1).\n#' @param gate_logits numeric(1): Log-odds of extra zeros.\n#' @param validate_args Logical: Whether to validate parameter values.  Defaults to `reticulate::py_none()`.\n#' @param shape numeric(1): A multi-purpose argument for shaping. When `sample=False` (model building),\n#'   this is used with `.expand(shape)` to set the distribution's batch shape.\n#'   When `sample=True` (direct sampling), this is used as `sample_shape` to draw a raw\n#'   JAX array of the given shape.  Provide as a numeric vector (e.g., `c(10)`).\n#' @param event int(1): The number of batch dimensions to reinterpret as event dimensions (used in model building).\n#' @param mask logical(1): Optional boolean array to mask observations.\n#' @param create_obj Logical: If True, returns the raw NumPyro distribution object instead of creating a sample site.\n#'   This is essential for building complex distributions like `MixtureSameFamily`.\n#' @return When `sample=FALSE`: A NumPyro ZeroInflatedDistribution distribution object (for model building).\n#'   When `sample=TRUE`: A JAX array of samples drawn from the ZeroInflatedDistribution distribution (for direct sampling).\n#'   When `create_obj=TRUE`: The raw NumPyro distribution object (for advanced use cases).\n#' @examples\n#' library(BI)\n#' m = importBI('cpu')\n#' bi.dist.zero_inflated_distribution(base_dist = m.dist.poisson(rate = 5, create_obj = TRUE), gate = 0.3, sample = TRUE)\n#'\n#' @seealso \\url{https://num.pyro.ai/en/stable/distributions.html#zeroinflateddistribution}\n#' @export\n#' @importFrom reticulate py_none tuple\nbi.dist.zero_inflated_distribution <- function(base_dist, gate = NULL, gate_logits = NULL, validate_args = NULL, shape = NULL, event = NULL, mask = NULL, create_obj = NULL, sample = NULL) {\n  # This is a placeholder.  The actual implementation would call the Python function.\n  NULL\n}\n```", "zero_inflated_negative_binomial2": "```r\n#' Zero-Inflated Negative Binomial 2 Distribution\n#'\n#' This distribution combines a Negative Binomial 2 distribution with a binary gate variable.\n#' Observations are either drawn from the Negative Binomial 2 distribution with probability\n#' (1 - gate) or are treated as zero with probability 'gate'. This models data with excess zeros\n#' compared to what a standard Negative Binomial 2 distribution would predict.\n#'\n#' \\deqn{P(X = x) = (1 - gate) \\cdot \\frac{\\Gamma(x + \\alpha)}{\\Gamma(x + \\alpha + \\beta) \\Gamma(\\alpha)} \\left(\\frac{\\beta}{\\alpha + \\beta}\\right)^x + gate \\cdot \\delta_{x, 0}}\n#'\n#' @export\n#' @importFrom reticulate py_none tuple\n#'\n#' @param mean Numeric or a numeric vector. The mean of the Negative Binomial 2 distribution.\n#' @param concentration Numeric or a numeric vector. The concentration parameter of the Negative Binomial 2 distribution.\n#' @param shape A numeric vector.  A multi-purpose argument for shaping. When `sample=False` (model building),\n#'   this is used with `.expand(shape)` to set the distribution's batch shape.\n#'   When `sample=True` (direct sampling), this is used as `sample_shape` to draw a raw\n#'   JAX array of the given shape.\n#' @param event Integer. The number of batch dimensions to reinterpret as event dimensions (used in model building).\n#' @param mask Logical vector. Optional boolean array to mask observations.\n#' @param create_obj Logical. If `TRUE`, returns the raw NumPyro distribution object instead of creating a sample site.\n#'   This is essential for building complex distributions like `MixtureSameFamily`.\n#'\n#' @return When `sample=FALSE`: A NumPyro ZeroInflatedNegativeBinomial2 distribution object (for model building).\n#'   When `sample=TRUE`: A JAX array of samples drawn from the ZeroInflatedNegativeBinomial2 distribution (for direct sampling).\n#'   When `create_obj=TRUE`: The raw NumPyro distribution object (for advanced use cases).\n#'\n#' @examples\n#' library(BI)\n#' m = importBI('cpu')\n#' bi.dist.zero_inflated_negative_binomial2(mean=2.0, concentration=3.0, gate = 0.3, sample=TRUE)\n#'\n#' @seealso \\url{https://num.pyro.ai/en/stable/distributions.html#zeroinflatednegativebinomial2}\n```", "zero_inflated_poisson": "```r\n#' A Zero Inflated Poisson distribution.\n#'\n#' This distribution combines two Poisson processes: one with a rate parameter and another that generates only zeros.\n#' The probability of observing a zero is determined by the 'gate' parameter, while the probability of observing a non-zero value is governed by the 'rate' parameter of the underlying Poisson distribution.\n#'\n#' @section Math:\n#'\n#' \\deqn{P(X = k) = (1 - gate) * \\frac{e^{-rate} rate^k}{k!} + gate}\n#'\n#' @param gate The gate parameter.\n#' @param rate A numeric vector, matrix, or array representing the rate parameter of the underlying Poisson distribution.\n#' @param shape A numeric vector used to shape the distribution. When `sample=False` (model building), this is used with `.expand(shape)` to set the distribution's batch shape. When `sample=True` (direct sampling), this is used as `sample_shape` to draw a raw JAX array of the given shape.\n#' @param event The number of batch dimensions to reinterpret as event dimensions (used in model building).\n#' @param mask An optional boolean vector, matrix, or array to mask observations.\n#' @param create_obj Logical; If `TRUE`, returns the raw NumPyro distribution object instead of creating a sample site.\n#' @param sample Logical; If `TRUE`, draws samples from the distribution.\n#'\n#' @return A NumPyro ZeroInflatedPoisson distribution object (when `sample=FALSE`).\n#' A JAX array of samples drawn from the ZeroInflatedPoisson distribution (when `sample=TRUE`).\n#' The raw NumPyro distribution object (when `create_obj=TRUE`).\n#'\n#' @examples\n#' library(BI)\n#' m = importBI('cpu')\n#' bi.dist.zero_inflated_poisson(gate = 0.3, rate=2.0, sample=TRUE)\n#'\n#' @export\n#' @importFrom reticulate py_none tuple\n```", "zero_sum_normal": "```r\n#' Samples from a ZeroSumNormal distribution, which is a Normal distribution where one or more axes are constrained to sum to zero.\n#'\n#' @title zero_sum_normal\n#'\n#' @description\n#' Samples from a ZeroSumNormal distribution, which is a Normal distribution where one or more axes are constrained to sum to zero.\n#'\n#' @param scale A numeric vector or array representing the standard deviation of the underlying normal distribution before the zerosum constraint is enforced.\n#' @param shape A numeric vector specifying the shape of the distribution. When `sample=False` (model building), this is used with `.expand(shape)` to set the distribution's batch shape. When `sample=True` (direct sampling), this is used as `sample_shape` to draw a raw JAX array of the given shape.\n#' @param event An integer representing the number of batch dimensions to reinterpret as event dimensions (used in model building).\n#' @param mask A logical vector or array. Optional boolean array to mask observations.\n#' @param create_obj A logical value. If `TRUE`, returns the raw NumPyro distribution object instead of creating a sample site. This is essential for building complex distributions like `MixtureSameFamily`.\n#'\n#' @return\n#' When `sample=FALSE`: A NumPyro ZeroSumNormal distribution object (for model building).\n#'\n#' When `sample=TRUE`: A JAX array of samples drawn from the ZeroSumNormal distribution (for direct sampling).\n#'\n#' When `create_obj=TRUE`: The raw NumPyro distribution object (for advanced use cases).\n#'\n#' @examples\n#' library(BI)\n#' m = importBI('cpu')\n#' bi.dist.zero_sum_normal(scale=1.0, shape = c(2), event = 0, sample=TRUE)\n#'\n#' @export\n#' @importFrom reticulate py_none tuple\n#' @seealso \\url{https://num.pyro.ai/en/stable/distributions.html#zerosumnormal}\n```"}